# 
# A script to measures the similarity between the putative orthologs 
# based on the code of the benchmark paper.
#
#                               Adrian Altenhoff, Sept 2006
#                  rewritten    Adrian Altenhoff, July 13, 2007
#   rewritten for BenchService  Adrian Altenhoff, Dec 4, 2009  
#
#  in: resFn, filter, projs, lock, measure

Set(printgc=false); Set(gc=5e6): 
OpenWriting(lock); lprint(getpid()); OpenWriting(previous);

prj := [seq(GetPKeyData(z),z=projs)]:
iSet := GetProjISets(prj);
LoadGenomeStartIDs(); # initalizes GSID

# load the project databases
nP := length(prj); dbs := CreateArray(1..nP):
for i to nP do dbs[i] := DB := ReadDb( prj[i,'fnBase'].'.db' ); od:
if not type(dbs, list(database)) then 
   OpenWriting(resFn);
   printf('error(''could not open databases'');\n');
   OpenWriting(previous);
   CallSystem('rm -f '.lock);
   quit
fi:

ReadProgram(datdir.'enzymes.drw'); # assigns EC

# get the superclasses for a given EC including the empty class -> any Enzyme.
ECsuperclassR := proc( c:string )
    i := SearchAllString('.', c):
    return( ['', seq(c[1..z-1], z=i), c] );
end:

ECFreqs := proc( proteins:{set,intersect()} )
    t := []:
    direct := evalb(proteins=intersect());
    for i to If(direct,length(EC),length(proteins)) do
        z := If(direct,i,proteins[i]);
        if EC[z]<>0 then for x in EC[z] do 
            t := append(t, op(ECsuperclassR(x)) ):
        od fi;
    od:
    freqs := transpose( [seq([z,0], z=[op({op(t)})] )] ):

    cnts := 0;
    for i to If(direct,length(EC),length(proteins)) do
        z := If(direct, i, proteins[i]);
        if EC[z]<>0 then for x in EC[z] do 
            for term in ECsuperclassR(x) do
                k := SearchOrderedArray(term, freqs[1]):
                assert(freqs[1,k]=term);
                freqs[2,k] := freqs[2,k] + 1;
            od:
            cnts := cnts + 1;
        od fi:
    od:
    if cnts>0 then freqs[2] := freqs[2] / cnts fi:
    return(freqs);
end:


ComputeSimilarity := proc(data:list; 'method'=(method:string))
    if method='avg Sim' then
        return( avg(seq(z[2],z=data)) );
    elif method='max Sim' then 
        return( max(seq(z[2],z=data)) );
    elif method='avg Info' then
        return( avg(seq(z[3], z=data)) );
    elif method='max Info' then
        return( max(seq(z[3], z=data)) );
    elif method='avg Schlicker' then
        max1 := CreateArray(1..max(seq(z[4],z=data)),1..2,-DBL_MAX);
        max2 := CreateArray(1..max(seq(z[5],z=data)),1..2,-DBL_MAX);
	for i to length(data) do
	     z := data[i];
	     if z[2] > max1[z[4],1] then max1[z[4]] := [z[2],i]; fi; 
	     if z[2] > max2[z[5],1] then max2[z[5]] := [z[2],i]; fi; 
	od:
	s := c := 0;
	for i in [op(max1),op(max2)] do
	    if i[1]>-DBL_MAX then s := s+i[1]; c:=c+1; fi:
	od:
	return( s/c );
    else error('similarity not implemented') fi:
end:

# Lookup Function to get the OccurenceFreqencey of a given EC term
freqs := ECFreqs(iSet):
GetFreq := proc(ec:string)
    k := SearchOrderedArray(ec,freqs[1]);
    assert(k>0 and k<=length(freqs[1]) and freqs[1,k]=ec);
    return( freqs[2,k] );
end:
# measure similarities between putative orthologs
Sims := [seq(Stat(z['Title']), z=prj)];
directMap := evalb(iSet=intersect());
nProt := If(directMap,length(EC),length(iSet));
for pNr to nP do 
    DB := dbs[pNr];
    for i to nProt do 
        oE1 := If(directMap,i,iSet[i]);
        if EC[oE1]<>0 then
            eNr := If( prj[pNr,'directMap'], oE1, DbEntryNrFromENr(oE1) );
            vps := ParseLongList(SearchTag('VP', Entry(eNr)));
            for vp in vps do 
                if vp<oE1 then next fi: # uni-directional
                if not member(vp, iSet) then next fi; # not in intersection set 
                if EC[vp]=0 then next fi: # ortholog has no EC tag
               
                pairs := [];
                for ig1 to length(EC[oE1]) do for ig2 to length(EC[vp]) do
                    ec1 := EC[oE1,ig1]; fec1 := GetFreq(ec1); 
                    ec2 := EC[vp,ig2];  fec2 := GetFreq(ec2); 
                    ic := intersect( {op(ECsuperclassR(ec1))}, {op(ECsuperclassR(ec2))} );
                     #                     2*ln(prob(interClass[i]))
                     # similarity   sim = ---------------------------
                     #                    ln(prob(go1))+ln(prob(go2))
                    simRun := infoRun := -DBL_MAX;
                    for int in ic do
                        info := -2*ln(GetFreq(int));
                        sim  := If(info=0, 0, -info/(ln(fec1)+ln(fec2)));
                        if info > infoRun then infoRun := info; infoInt := int fi;
                        if sim  > simRun  then simRun := sim; simInt := int fi;
                    od:
                    pairs := append(pairs, [1, simRun, infoRun, ig1, ig2] );
                od od:
                if length(pairs)>0 then
                    Sims[pNr] + ComputeSimilarity(pairs, 'method'=measure);
                fi:
            od:
        fi;
	if mod(i,5000)=0 then
	    OpenWriting(lock);
	    lprint(getpid());
	    printf('%.1f%% finished so far\n', 100*((pNr-1)*nProt + i)/ (nProt*nP));
	    OpenWriting(previous);
	fi:
    od:
od:
            
OpenWriting(resFn);
printf('Sims := %A:\nPIDs := %A:\n', Sims, [seq(z['PID'],z=prj)]);
printf('# filter := %A:\n# measure := %A:\n', filter, measure);
OpenWriting(previous);

CallSystem('rm -f '.lock);
done;

