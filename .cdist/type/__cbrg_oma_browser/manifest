#!/bin/sh
#
# 2012 Steven Armstrong (steven-cdist at armstrong.cc)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#

os=$(cat "$__global/explorer/os")

not_supported() {
   echo "Your operating system ($os) is currently not supported by this type (${__type##*/})." >&2
   echo "Please contribute an implementation for it if you can." >&2
   exit 1
}

case "$os" in
   ubuntu)
      :
   ;;
   *)
      not_supported
   ;;
esac


# Read parameters
name="$__object_id"
user="$(cat "$__object/parameter/user")"
group="$(cat "$__object/parameter/group")"
server_name="$(cat "$__object/parameter/server-name")"
server_aliases="$(cat "$__object/parameter/server-alias" 2>/dev/null || true)"
server_port="$(cat "$__object/parameter/server-port" 2>/dev/null || true)"


if [ -f "$__object/parameter/use-cache" ]; then
   if [ ! -f "$__object/parameter/cache-max-size" -o ! -f "$__object/parameter/cache-keys-zone" ]; then
      echo "Missing required parameters 'cache-max-size' and/or cache-keys-zone" >&2
      exit 1
   fi
   nginx_cache_max_size="$(cat "$__object/parameter/cache-max-size")"
   nginx_cache_keys_zone="$(cat "$__object/parameter/cache-keys-zone")"
fi


# Internal variables
user_home="/local/home/$user"
user_log_dir="$user_home/log"
user_run_dir="$user_home/run"
user_var_dir="$user_home/var"
nginx_user="www-data"
nginx_group="www-data"
nginx_root_dir="$user_home/Browser/htdocs"
nginx_cgi_base_dir="$user_home/Browser"
nginx_log_dir="/var/log/nginx/$name"
nginx_temp_base_dir="/local/nginx-oma"
nginx_proxy_cache_path="$user_var_dir/cache"
nginx_proxy_temp_path="$user_var_dir/tmp"


# Create directory for storing files generated from templates
mkdir "$__object/files"


### User account
# Control ranges for automatic uid/gid selection
__cbrg_uid_gid
# Home directory
__cbrg_local_home "$user_home" \
   --user "$user" \
   --group "$group"
require="__cbrg_local_home/$user_home" \
   __cbrg_standard_app_dirs "$user_home" \
      --user "$user" \
      --group "$group"
# Link nginx log dir into user log dir for easy access
require="__cbrg_standard_app_dirs/$user_home __directory/$nginx_log_dir" \
   __link "$user_home/log/nginx" --source "$nginx_log_dir" --type symbolic
# Create cache base dir
require="__cbrg_local_home/$user_home" \
   __directory "$user_var_dir" \
      --owner "$user" \
      --group "$group" \
      --mode 1775


### Webserver
__nginx
require="__nginx" __nginx_default_site
require="__nginx" __directory "$nginx_log_dir" --owner "$nginx_user" --group "$group" --mode 0750

# export variables for use in template
export server_name
export server_aliases
export server_port
export nginx_root_dir
export nginx_log_dir
export nginx_cgi_base_dir
export nginx_proxy_cache_path
export nginx_proxy_temp_path
export user_run_dir
if [ -f "$__object/parameter/use-cache" ]; then
   export nginx_cache_max_size
   export nginx_cache_keys_zone
fi
# generate config file from template
"$__type/files/nginx.template" > "$__object/files/nginx"
require="__nginx" \
   __nginx_site "$name" \
      --source "$__object/files/nginx"
# allow webserver to write to application server socket, needs correspondig nginx.conf
require="__nginx" __user_groups "$user" --group "$nginx_group"


### Application dependencies
__pkg_bundle oma-deps --file "$__type/files/packages"


### Process supervision
# TODO: start uwsgi processes on boot automatically


### Rotate logfiles
# export variables for use in template
export group
export nginx_log_dir
export user_log_dir
export user_run_dir
# generate config file from template
"$__type/files/logrotate.template" > "$__object/files/logrotate.conf"
__logrotate "$name" \
   --file "$__object/files/logrotate.conf"
