#!/bin/sh
set -u
cat << DONE
# Created by cdist ${__type##*/}
# Do not change. Changes will be overwritten.
#

DONE

if [ -n "$server_aliases" ]; then
   cat << DONE
server {
   # we only have one name, redirect all others there
   server_name $server_aliases;
   return 301 \$scheme://$server_name\$request_uri;
}

DONE
fi

log_format="";
if [ -f "$__object/parameter/use-cache" ]; then
   log_format="cache"
   cat << DONE
# Configure cache log formats
log_format cache '\$remote_addr - \$host [\$time_local]  '
                 '"\$request" \$status Cache:\$upstream_cache_status \$body_bytes_sent '
                 '"\$http_referer" "\$http_user_agent"';
log_format cache_debug '***\$time_local '
    '\$upstream_cache_status '
    'Cache-Control: \$upstream_http_cache_control '
    'Expires: \$upstream_http_expires '
    '\$host '
    '"\$request" (\$status) '
    '"\$http_user_agent" '
    'Args: \$args '
    'HTTP Cookie: \$http_cookie ';

# Configure cache
proxy_cache_path $nginx_proxy_cache_path levels=1:2 keys_zone=$nginx_cache_keys_zone inactive=365d max_size=$nginx_cache_max_size;
proxy_temp_path $nginx_proxy_temp_path;

# Filter out what not to cache
map \$arg_f \$no_cache {
   default 0;
   ~*^Display(TR|MSA) 1;
   AllAllExport 1;
   BuildTree 1;
   ViewTree 1;
}

DONE
fi

cat << DONE
# Caching proxy server
server {
   $([ -n "$server_port" ] && echo "listen $server_port;")
   server_name $server_name;
   # path for static files
   root $nginx_root_dir;
   access_log $nginx_log_dir/proxy.access.log $log_format;
   $([ -f "$__object/parameter/use-cache" ] && echo "access_log $nginx_log_dir/cache_debug.log cache_debug;")
   error_log $nginx_log_dir/proxy.error.log;
   index index.html;

   # Gzip Configuration.
   gzip on;
   gzip_disable msie6;
   gzip_static on;
   gzip_comp_level 4;
   gzip_proxied any;
   gzip_types text/plain
              text/css
              application/x-javascript
              text/xml
              application/xml
              application/xml+rss
              text/javascript;

   # Pretty URIs as requested by CD.
   rewrite ^/export\$ /oma/export permanent;  #AA: 4.Sep14, use new genome picker.
   rewrite ^/cgi-bin/gateway.pl?f=AllAllExport /oma/export permanent;  # AA: 24.Sep14, selection now done in python environment.

   # Check if a file exists at \$root for the incoming request.
   # If it doesn't proxy to backend server.
   try_files \$uri \$uri/ @proxy;

   location @proxy {
      include proxy_params;
      proxy_pass http://127.0.0.1:8888;
DONE
if [ -f "$__object/parameter/use-cache" ]; then
   cat << DONE

      # Use cache
      proxy_cache oma;
      proxy_cache_valid 200 302 304 365d;
      proxy_cache_use_stale error timeout invalid_header http_500;
      proxy_cache_key \$scheme\$request_method\$host\$request_uri;
      proxy_cache_bypass \$no_cache;
      proxy_no_cache \$no_cache;
DONE
fi
cat << DONE
   }
}

DONE


legacy_upstream="
      include uwsgi_params;
      uwsgi_modifier1 9;
      uwsgi_pass unix://${user_run_dir}/uwsgi-legacy.sock;
"
cat << DONE

# the upstream component nginx needs to connect to
upstream pyoma {
   server unix://$user_run_dir/uwsgi-pyoma.sock;
}


# Configure limit zones
limit_req_zone \$binary_remote_addr zone=onlineComp:5m rate=5r/m;
limit_req_zone \$binary_remote_addr zone=preComp:5m rate=3r/s;

# Webserver frontend
server {
   listen 127.0.0.1:8888;
   # path for static files
   root $nginx_root_dir;
   access_log $nginx_log_dir/access.log;
   error_log $nginx_log_dir/error.log;
   index index.html;

   # Get client ip from proxy
   set_real_ip_from 127.0.0.1;
   real_ip_header X-Real-IP;

   # Apply limits for resources which are computed on the fly
   location @onlineComp {
      limit_req zone=onlineComp burst=3 nodelay;
      gzip off;
      ${legacy_upstream}
   }

   # Apply limits for precomputed resources
   location @preComp {
      limit_req zone=preComp burst=5 nodelay;
      gzip off;
      ${legacy_upstream}
   }

   # Handle requests to gateway
   location /cgi-bin/gateway.pl {
      # (ab)use 418 as goto
      error_page 418 = @preComp;

      if (\$arg_f ~* "^Display(TR|MSA)") {
         # (ab)use 418 as goto
         error_page 418 = @onlineComp;
      }
      return 418;
   }

   # Handle requests to any other cgi
   location /cgi-bin/ {
      gzip off;
      ${legacy_upstream}
   }

   # Handle requests to the python version
   location /oma/ {
      include uwsgi_params;
      uwsgi_pass pyoma;
   }
}
DONE
