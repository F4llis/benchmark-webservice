##
#  Script to run the species tree discordance test  
#
#  in: resFn, problem, projs, lock
Set(printgc=false):

OpenWriting(lock); lprint(getpid()); OpenWriting(previous);
CreateDayMatrices();


prj := [seq(GetPKeyData(z),z=projs)]:
iSet := GetProjISets(prj);
LoadGenomeStartIDs(); # initalizes GSID

ReadProgram(problem); # this loads the species tree and the bins containg species
nrBins := length(catBins);
catBinsNr := [seq({seq(GenomeNrFromCode(g),g=catBins[i])}, i=1..nrBins)];
# lookup table for a genome to which bin it belongs (if any)
orgNr2Bin := table(0);
for i to nrBins do for z in catBinsNr[i] do orgNr2Bin[z] := i; od od:

# load the project databases
nP := length(prj); dbs := CreateArray(1..nP):
for i to nP do dbs[i] := DB := ReadDb( prj[i,'fnBase'].'.db' ); od:

cases := [];
for gNr in catBinsNr[1] do for oE from GSID[1,gNr] to GSID[1,gNr]+GSID[3,gNr]-1 do
    if not member(oE, iSet) then next fi:
    
    assert( orgNr2Bin[GenomeNrFromENr(oE)]=1 );
    treeProt := CreateArray(1..nP): 
    # logical array if lineage is present in all projects
    miss := CreateArray(1..nrBins, 0);
    goOn := true;
    for pNr to nP do
        # get entry nr of project DB of protein having omaEntryNr oE
        DB := dbs[pNr];
        eNr := If( prj[pNr,'directMap'], oE, DbEntryNrFromENr(oE) );
        
        vps := ParseLongList(SearchTag('VP', Entry(eNr)));
	vpCat := CreateArray(1..nrBins,[]):
        for vp in vps do
	    if not member(vp,iSet) then next fi;
            
	    bin := orgNr2Bin[ GenomeNrFromENr(vp) ]:
	    if bin>1 then vpCat[bin] := append(vpCat[bin], vp) fi:
	od:
	for i from 2 to nrBins do 
	    if length(vpCat[i])>0 then
	       vpCat[i] := vpCat[i, Rand(1..length(vpCat[i]))];
	    else 
	       miss[i] := 1;
	    fi
	od:
	vpCat[1] := oE;
        treeProt[pNr] := vpCat;

	# check if we're still below the missing lineage limit, otherwise break
	# the loop and go on with the next candidate protein.
        if sum(miss) > missThreshold then 
	    goOn := false; break;
        fi:
    od:
    
    # only keep the cases that have not too much missing lineages
    if goOn then 
        cases := append(cases, treeProt):
    fi: 
od od:

if length(cases) > MAX_NR_TREES then
    cases := Shuffle(cases)[1..MAX_NR_TREES]:
fi:
lprint('nr of cases:',length(cases));

RFstat := [seq( Stat(sprintf('Robinson-Fould split distance for %s', 
                             p['Title'])), p=prj)];
DB := SeqDB := ReadDb(omaDBpath.'ServerSeqs.db'):
cErr := Counter('# errors in PhylogeneticTree');
for cas in cases do for pNr to nP do
    seqs := labs := [];
    for i to nrBins do if cas[pNr,i]>0 then 
        seqs := append(seqs, Sequence(Entry(cas[pNr,i])));
        labs := append(labs, i);
    fi od:
    genetree := traperror(PhylogeneticTree(seqs, labs, 'DISTANCE'));
    if genetree=lasterror then cErr+1; next fi;

    RFstat[pNr] + RobinsonFoulds([genetree, speciestree])[1,2];
od od:

OpenWriting(resFn);
printf('RFstat := %A:\n', RFstat):
printf('PIDs := %A:\n', [seq(z['PID'], z=prj)] );
OpenWriting(previous);

CallSystem('rm -f '.lock);
done;

