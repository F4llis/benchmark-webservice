##############################################
# Backend for the OMA browser.             #
# Reads the 'Din' pipe and executes the      #
# commands.                     #
##############################################
if not assigned(DEBUG) then DEBUG := false fi:
if not assigned(RUNLOCAL) then RUNLOCAL := true fi:
noRemember := true;
SetRandSeed();
Set(printgc=false); Set(gc=1e8):

ReadProgram('lib/darwinit');

print(getpid());
version();
t:=TimedCallSystem('ulimit -a'):
prints(t[2]);
ReadProgram(wdir.'nogos.drw');


darwin64 := If(RUNLOCAL,'/local/darwin_source/darwin64 -q', 
               '/home/darwin/v2/source/darwin64 -q');

logfile := wdir.'server.log';
if FileExists(omaDBpath.'/ServerIndexed.db') then
else printf('Browser not found\n'); quit fi;

ReadProgram(omaDBpath.'Summaries.drw');
GS := GenomeSummaries:
LoadGenomeStartIDs():
google_analytics := '</body>'; #ReadRawFile(wdir.'templates/analytics.htmlc'):
#IDIndex := traperror(ReadDb(omaDBpath.'IDIndex.db'));
#IndDB :=ReadDb(omaDBpath.'ServerIndexed.db');   # with the descriptions
#SeqsDB :=ReadDb(omaDBpath.'ServerSeqs.db'); # with the sequences
#VPsDB :=ReadDb(omaDBpath.'ServerVPs.db'); # with the VPs
#NS := length(genomes):


# --------------------- General Functions -------------------------

#################################
# Run server is the main loop   #
# that runs forever.            #
#################################
RunServer := proc()
global StartTime,nReq;
WriteLog('server started on '.hostname().': '.getpid());
inpipe := '/tmp/BSin.'.hostname();
StartTime := date();
nReq :=0;
do 
    OpenReading(inpipe);
    do
        t := ReadRawLine();
        if t=EOF then break fi;
        pt := t;
        cp := SearchString('cookies=table([{NULL}]',pt);
        if cp>-1 then pt := pt[1..cp-1].pt[cp+35..-1] fi;
        WriteLog(pt[1..-2].' requested');
        if t[1..7]='Request' then 
        e := traperror(eval(parse(t)));
        if e=lasterror then 
             WriteLog(sprintf('*** ERROR: %a',e));
             # if too many files are open, it can no longer
             # create a pipe. We need to restart
             if e='Cannot create pipe' then quit fi;
        else
             WriteLog(pt[1..-2].' completed');
             nReq := nReq+1;
        fi;
    fi;
    od;
od;
end:


###############################
# Write log                   #
###############################
WriteLog := proc(s:string)
OpenAppending(logfile);
printf('%s (%s, %d): %s\n',date(),hostname(),getpid(),s);
OpenAppending(previous);
end:

#######################################
# general Error message handler       #
#######################################
UNEXPECTED_ERROR_MSG := proc(fun:string, var:string)
   msg := sprintf('*** An unexpected Error occured in %s (%s). '.
          'Please report to adrian.altenhoff@inf.ethz.ch. Thanks', fun, var);
   WriteLog(msg);
   return(msg);
end:
#######################################
# Page to display in case of an error #
#######################################
ErrorPage := proc(filename:string,msg:string)
print(msg);
vars := table(''):
#vars['header'] := MakeHeader('SearchDb','');
vars['message'] := msg;
return(GenerateTemplate(wdir.'templates/error.html',vars));
end:

#########################################
# Write resulting page                #
# We write first to a normal file and     #
# then cat the fiel to the pipe. In    #
# the case noone reads the pipe, we    #
# wait at most 2 seconds and then    #
# return.                 #
#########################################
WriteResult := proc(filename:string, html:string) 
OpenWriting(filename.'tmp');
p := SearchString('</body>',html);
if p>-1 then
    prints(html[1..p]);
    prints(google_analytics);
    prints('</html>');
else
    prints(html);
fi;
OpenWriting(previous);
TimedCallSystem('cat '.filename.'tmp >>'.filename,10);
CallSystem('rm '.filename.'tmp');
end:
# --------------- Server Functions -------------------------------


#################################################
# the main function that processes all requests.#
#################################################
Request := proc(funcname:string,filename:string;
    'params'=(params:list), 
    'pnames'=(pnames:list), 
    'cookies' = (cookies:table))
global DB,InDB,Cookies;
WriteResult(filename.'.alive','ALIVE\n');

if assigned(cookies) then
   Cookies := cookies;
else
   Cookies := table(NULL);
fi;

if funcname = 'Index' then
    html := traperror(bsIndex(op(params)));
elif funcname = 'UploadData' then 
    html := traperror(bsUploadData(op(params)));
elif funcname = 'MapData' then
    html := traperror(bsMapData(op(params)));
elif funcname = 'MapRels' then
    html := traperror(bsMapRels(op(params)));
elif funcname = 'TestSelection' then
    html := traperror(bsTestSelection(op(params))); 
elif funcname = 'RunTests' then
    html := traperror(bsRunTests(params,pnames));

elif funcname = 'Service' then
    html := traperror(bsService());
# cookies/settings
elif funcname = 'ViewCookie' then
    html := traperror(bsViewCookie());
elif funcname = 'Settings' then
    html := traperror(bsSettings());
else
    html := traperror(NotImplemented(funcname));
fi;

if html=lasterror then
    print(lasterror);
    res := '';
    for z in [lasterror] do
        res := res . sprintf('%a ',z);
    od:
    html := ErrorPage(filename,res);
fi;

WriteResult(filename,html);

return(true);

end:


####################################
# Index Page                       #
####################################
bsIndex := proc(;itype:string)

if itype='params' then
    if Cookies['FormSize']<>NULL then
      itype := Cookies['FormSize'];
    else itype := 'small' fi;
fi;

vars := table('');
vars['nspecies'] := string(NS);
vars['logo'] := '/OMAbrowser.gif';

return(GenerateTemplate(wdir.'templates/index.html',vars));
end:


####################################
# Upload Data                      #
####################################
bsUploadData := proc(fnBase:string, tit:string, nrProts, nrOrth)
    id := AddPKeyData(tit,fnBase):
    vars := table('');
    vars['tit'] := tit;
    vars['nrProt'] := nrProts;
    vars['nrOrth'] := nrOrth;
    vars['PID'] := id;
    return(GenerateTemplate(wdir.'templates/uploaded.html',vars));
end:

#################################
# MapData                       #
#################################
bsMapData := proc(PID:string)
    fnBase := GetPKeyData(PID)['fnBase'];
    seqMapResFn := fnBase.'.seqmap';
    lock := fnBase.'.lock';

    vars := table(''):
    vars['tit'] := GetPKeyData(PID)['Title'];

    if FileExists(seqMapResFn) then
        if FileExists(lock) and UTCTime()-FileStat(seqMapResFn)['st_mtime'] < 10 then
           # still computing
           vars['content'] := 'Still computing';
        else
           # visualize current mapping
           ReadProgram(seqMapResFn); #load MappingComb, TotProts, SPS and Colls
           prNS := length(MappingComb);
           cnts := CreateArray(1..prNS,1..NS+1):
           for pg to prNS do for g to NS+1 do cnts[pg,g] := length(MappingComb[pg,g]) od od:
           
           t := '<form name="specmap" action="gateway.pl" method="post">\n<table class="dropdown" id="species_mapping">\n'.
                '<tr><th>extracted species</th><th># protein uploaded</th><th>mapped species</th><th># mappable proteins</th></tr>';
           jsMap := '[';
           for pg to prNS do
               t := t.sprintf('<tr><td>%a</td><td>%d</td><td>'.
                  '<select name="p%04d" onChange="changeMapCnt(%d);">\n', 
                    SPS[pg], TotProts[pg], pg, pg);
               ord := sort([seq(g,g=1..NS)], x->-cnts[pg,x]);
               t := t.'<option value="n.a.">no mapping</option>\n';
           jsMap := jsMap . If(pg=1,'',',') . '{"n.a.":0';
               for p to NS while cnts[pg,ord[p]]>0 do 
                   t := t.sprintf(' <option value="%s"%s>%s - %s</option>\n',
                          genomes[ord[p]], If(p=1,' selected="selected"',''),genomes[ord[p]],
                          GS[genomes[ord[p]],SCINAME]);
               jsMap := jsMap.sprintf(',"%s":%d', genomes[ord[p]], cnts[pg,ord[p]]);
               od:
               t := t.sprintf('</select></td><td>%d</td></tr>\n', cnts[pg,ord[1]]);
           jsMap := jsMap.'}';
           od:
           t := t.sprintf('</table>\n<input type="hidden" name="p0" value="%s" />\n',PID);
           t := t.'<input type="hidden" name="f" value="MapRels"/>\n'.
                '<input type="submit" value="Next"/></form>\n';
           jsMap := jsMap.'];';
                    
           vars['content'] := t;
       vars['jsMappingArray'] := jsMap;
        fi;
        return( GenerateTemplate(wdir.'templates/sequenceMapping.html',vars) );
    fi:

    # check if mapping process is already running
    if FileExists(lock) then
        if IsLockProcessAlive(lock) then
            # still computing
            vars['content'] := '<p>Still computing...</p>';
        else
            # error page: mapping crashed
            vars['content'] := '<p>Mapping crashed</p>';
        fi;
        return( GenerateTemplate(wdir.'templates/sequenceMapping.html',vars) );
    fi:

    # the mapping did not start. start it! :-)
    CallSystem('touch '.lock);
    # start MSA as background process
    cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); spListFn:=''%s''; seqFn := ''%s''; '.
                  'resFn := ''%s''; lock:=''%s''; ReadProgram(''%s/ComputeSeqMapping.drw''); done" '.
                  '| nice -n 19 %s &',
                  wdir, fnBase.'.sps', fnBase.'.seqs', seqMapResFn, lock, wdir, darwin64);
    WriteLog('started command: '.cmd);
    prints(cmd);

    CallSystem( cmd );
    vars['content'] := 'Start computing mapping';
    html := GenerateTemplate(wdir.'templates/sequenceMapping.html',vars);
    return(html);
end:

bsTestSelection := proc(PID:string)
    global ReconciledTrees;
    fnBase := GetPKeyData(PID)['fnBase'];
    dbFn := fnBase.'.db';
    if not FileExists(dbFn) then 
        error('Project "'.GetPKeyData(PID)['Title'].'" was not corretely uploaded');
    fi:

    vars := table(''):
    vars['tit'] := GetPKeyData(PID)['Title'];
    
    publicProjects := {seq(z['Title'], z=GetPublicProjects())} minus {GetPKeyData(PID)['Title']};
    ReadProgram(datdir.'ReconciledTrees.drw'); # assigns ReconciledTrees
    refPhyloProbs := []; for i in Indices(ReconciledTrees) do 
        refPhyloProbs := append(refPhyloProbs, ReconciledTrees[i]) 
    od:

    for z in ['Euk','Bac','Fun'] do
        vars['TT'.z.'Projects'] := ConcatStrings(
         [seq(sprintf('<input type="checkbox" id="pTT%sPrj%d" name="pTT%sPrj%d" />'.
	              '<label for="pTT%sPrj%d">%s</label><br/>',
                       z,pNr,z,pNr,z,pNr,publicProjects[pNr]), pNr=1..length(publicProjects))],'\n');
        vars['has'.z] := 'checked';
    od:
    
    vars['RefPhyloProjects'] := ConcatStrings(
         [seq(sprintf('<input type="checkbox" name="pRefPhyloPrj%d" />%s<br/>',
                      pNr,publicProjects[pNr]), pNr=1..length(publicProjects))],'\n');
    vars['RefPhyloProblems'] := ConcatStrings(
         [seq(sprintf('<input type="checkbox" name="pRefPhyloProb%s" checked="checked" />'.
	              '<span title="%s">%s</span> <br/>',
                      z['Name'],z['Reference'],z['Name']), z=refPhyloProbs)],'\n');
    vars['RefPhyloProb1_id'] := 'RefPhyloProb'.refPhyloProbs[1,'Name'];
    
    vars['GOprojects'] := ConcatStrings(
         [seq(sprintf('<input type="checkbox" name="pGOPrj%d" />%s<br/>',
                      pNr,publicProjects[pNr]), pNr=1..length(publicProjects))],'\n');
    vars['ECprojects'] := ConcatStrings(
         [seq(sprintf('<input type="checkbox" name="pECPrj%d" />%s<br/>',
                      pNr,publicProjects[pNr]), pNr=1..length(publicProjects))],'\n');

    vars['PID'] := PID;
    return( GenerateTemplate(wdir.'templates/testSelection.html',vars) );
end:

bsMapRels := proc(PID:string)
    global SPS:
    fnBase := GetPKeyData(PID)['fnBase'];
    dbFn := fnBase.'.db';
    seqMapFn := fnBase.'.seqmap';
    lock := fnBase.'.lock';

    vars := table(''):
    vars['tit'] := GetPKeyData(PID)['Title'];

    if FileExists(dbFn) then
        if FileExists(lock) and UTCTime()-FileStat(dbFn)['st_mtime'] < 10 then
           # still computing
           vars['content'] := 'Still computing';
        else
           # provide test selection page:
       return( bsTestSelection(PID) );
        fi:
    fi:

    # check if mapping process is already running
    if FileExists(lock) then
        if IsLockProcessAlive(lock) then
            # still computing
            vars['content'] := '<p>Still computing...</p>';
        else 
            # error page: mapping crashed
            vars['content'] := '<p>Mapping crashed</p>';
        fi;
        return( GenerateTemplate(wdir.'templates/sequenceMapping.html',vars) );
    fi:

    # the mapping did not start. start it! :-)
    CallSystem('touch '.lock);
    SPS := 0; ReadProgram(fnBase.'.sps'); assert(SPS<>0);
    if nargs<=length(SPS) then error('too few arguments received') fi;
    orgMap := [seq( SearchArray(z, genomes), z=[args[2..length(SPS)+1]] )];

    # start computation as background process
    cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resDBfn:=''%s''; seqmapfn:= ''%s''; '.
                  'relsinfn := ''%s''; lock:=''%s''; orgMap := %A; '.
                  'ReadProgram(''%s/ComputeRelMapping.drw''); done;" | nice -n 19 %s &',
                  wdir, dbFn, seqMapFn, fnBase.'.rels', lock, orgMap, wdir, darwin64);
    WriteLog('started command: '.cmd);
    prints(cmd);

    CallSystem( cmd );
    vars['content'] := 'Start computing mapping';
    html := GenerateTemplate(wdir.'templates/sequenceMapping.html',vars);
    return(html);
end:

IsLockProcessAlive := proc(lock:string)
    if not FileExists(lock) then error('lockfile not present') fi:
    
    # wait for result page but also check, whether job is still running
    lockOldAndEmpty := FileStat(lock)['st_size']=0 and UTCTime()-FileStat(lock)['st_mtime']>60;
    procDeath := false;
    if FileStat(lock)['st_size']>0 then 
        pid := SplitLines(ReadRawFile(lock))[1];
        t := TimedCallSystem('ps -eo pid | grep -w '.pid,4);
        procDeath := evalb(t[1]<>0);
    fi:
    return( not(lockOldAndEmpty or procDeath) );
end:


StartTreeTest := proc(PID:string, king:string, params:list, pnames:list)
    global RFstat;
    fnBase := GetPKeyData(PID)['fnBase'];
    lock  := sprintf('%s.%s.lock',fnBase,king);
    vars := table('');
    vars['case'] := king;
    vars['resheader'] := 'Species Tree Discordance Test - Dataset '.king;
    
    pubPrj := GetPublicProjects();

    projs := [op( {op(GetPublicProjects())} minus {GetPKeyData(PID)} )];
    projs := sort( projs, x->x['Title'] );
    sel := [seq(If(length(z)>9 and z[1..9]='pTT'.king[1..3].'Prj', parse(z[10..-1]), NULL), z=pnames)];
    projs := [seq(projs[i,'PID'], i=sel), PID];
    resFn := sprintf('%s/TreeTest.%s.%a.drw', resdir, king, hash(projs) );
    if FileExists(lock) then
        if IsLockProcessAlive(lock) then
            t := SplitLines(ReadRawFile(lock));
            msg := '';
            if length(t)>1 then 
                msg := '<p><b>Status:</b> '.t[2,1..-2].'</p>';
            fi:
            vars['content'] := msg.'<p>We are still computing the final result...</p>';
        else
            CallSystem('rm -f '.lock);
            vars['content'] := '<p>Computation crashed. Try to restart by resubmitting request.</p>'; 
        fi:
    elif FileExists(resFn) then
        RFstat := 0;
        traperror(ReadProgram(resFn)):
        if RFstat=0 then 
            vars['content'] := UNEXPECTED_ERROR_MSG(procname, 'RFstat=0');
        else 
            tab := Table( border, gutter=2, ColAlign(l,r,c), 
                   Row(Bold('Project'),Bold('# trees'),Bold('avg RF distance( genetree , speciestree )')));
            for z in RFstat do 
                tab := append(tab, Row(z[Description], z[Number], z[MeanVar]));
            od:
            vars['content'] := HTMLC(tab);
        fi;
    else 
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resFn :=''%s''; problem := ''%s/TreeCat_%s.drw''; '.
               'projs := %A; lock:=''%s''; ReadProgram(''%s/TreeTest.drw''); done;" | nice -n 19 %s &',
               wdir, resFn, datdir, king, projs, lock, wdir, darwin64);
        prints(cmd);
        CallSystem( cmd );
        WriteLog('started command: '.cmd);
        vars['content'] := '<p>Computation started...</p>';
    fi:
    return( GenerateTemplate(wdir.'templates/secResult.htmlc', vars) );
end:

HandleLockFile := proc(lock:string)
    if IsLockProcessAlive(lock) then
        t := SplitLines(ReadRawFile(lock));
        msg := '';
        if length(t)>1 then 
            msg := '<p><b>Status:</b> '.t[2,1..-2].'</p>';
        fi:
        return( msg.'<p>We are still computing the final result...</p>' );
    else
        CallSystem('rm -f '.lock);
        return('<p>Computation crashed. Try to restart by resubmitting request.</p>'); 
    fi:
end:

Handle2dROCFiles := proc(resFn:string, resBase:string, 
        cases:list(string), PIDs:list(string), vars:table;
        'aggregate'=((aggregate='sample variance'):string) )
    global FPR, TPR;
    FPR := TPR := 0;
    traperror(ReadProgram(resFn));
    if FPR=0 or TPR=0 or length(FPR)<>length(cases) 
             or length(FPR[1])<>length(PIDs) then 
        vars['content'] := UNEXPECTED_ERROR_MSG(procname, 'FPR, TPR');
    else
        prjNames := [seq(GetPKeyData(z)['Name'], z=PIDs)];
        tab := Table( border, gutter=2, ColAlign(l,c,c),
	         Row(Bold('Case'),Bold('Project'),Bold('FPR'),Bold('TPR')) );
        for c to length(cases) do for i to length(prjNames) do 
	    tab := append(tab, Row( If(i=1,cases[c],''), prjNames[i], 
	          If(FPR[c,i]<>0, sprintf('%g +- %g', op(FPR[c,i])), 'n.a.' ),
	          If(TPR[c,i]<>0, sprintf('%g +- %g', op(TPR[c,i])), 'n.a.' )) );
	od: tab:=append(tab,Rule); od:

        vars['content'] := HTMLC(tab);
    fi:
end:

Handle2dSimFiles := proc(resFn:string, resBase:string, vars:table;
        'measure'=((measure='avg Lin'):string) )
    global Sims;
    Sims := 0;
    traperror(ReadProgram(resFn)):
    if Sims=0 then 
        vars['content'] := UNEXPECTED_ERROR_MSG(procname, 'Sims=0');
    else 
        tab := Table( border, gutter=2, ColAlign(l,r,c), 
            Row(Bold('Project'),Bold('# ortholog relations'),Bold(measure)));
        for z in Sims do 
            tab := append(tab, Row(z[Description], z[Number], z[MeanVar]));
        od:
        
        resPlotFn := sprintf('%s/%s.png', imgdir, resBase);
        if not FileExists(resPlotFn) then
            t := table():
            t['outfile'] := resPlotFn;
            t['xlabel'] := '# of ortholog predictions';
            t['ylabel'] := measure.' Similarity';
            t['datafile'] := sprintf('/tmp/%s.dat',resBase);
            plotTab := [seq(table(), length(Sims))]:
            OpenWriting(t['datafile']);
            for i to length(Sims) do 
                printf('# %s\n%d\t%f\t%f\n\n\n', Sims[i,Description], 
                    Sims[i,Number], Sims[i,Mean], Sims[i,StdErr]);
                plotTab[i,'index'] := i-1; 
                plotTab[i,'title'] := Sims[i,Description];
                plotTab[i,'style'] := i;
            od:
            OpenWriting(previous);
            t['plot'] := plotTab;
            cmdFile := sprintf('/tmp/%s.gp', resBase);
            OpenWriting(cmdFile);
            prints( GenerateTemplate(wdir.'/templates/2d_multi.gp', t) );
            OpenWriting(previous);
                    
            CallSystem('gnuplot '.cmdFile);
            CallSystem('echo -e ",s/''\\/.*\\//''/g\\nwq\\n" | ed '.cmdFile);
            CallSystem('tar -C /tmp --remove-files -czf '.resBase.'.tgz '.resBase.'.gp '.resBase.'.dat');
            CallSystem('mv '.resBase.'.tgz '.rawdir);
        fi:
        vars['content'] := HTMLC(tab);
        vars['fig'] := imgurl.resBase.'.png';
        vars['gp_src'] := rawurl.resBase.'.tgz';
    fi;
end:

StartRefPhyloTest := proc(PID:string, params:list, pnames:list)
    fnBase := GetPKeyData(PID)['fnBase'];
    lock  := sprintf('%s.RefPhyl.lock',fnBase);
    vars := table('');
    vars['resheader'] := 'Agreement with Reference Phylogeny - Test';
    
    pubPrj := GetPublicProjects();

    projs := [op( {op(GetPublicProjects())} minus {GetPKeyData(PID)} )];
    projs := sort( projs, x->x['Title'] );
    sel := [seq(If(length(z)>11 and z[1..11]='pRefPhylPrj', parse(z[12..-1]), NULL), z=pnames)];
    projs := [seq(projs[i,'PID'], i=sel), PID];
    
    k := SearchArray('pRefPhylAggMeas',pnames);
    measure := If(k>0,params[k],'sample variance');

    problems := [seq(If(length(z)>13 and z[1..13]='pRefPhyloProb', parse(z[14..-1]), NULL), z=pnames)];
    lprint('DEBUG stmt');

    
    resBase := sprintf('RefPhyl.%a', hash([projs,measure,problems]) );
    resFn := sprintf('%s/%s.drw', resdir, resBase );
    if FileExists(lock) then 
        vars['content'] := HandleLockFile(lock);
    elif FileExists(resFn) then
        Handle2dROCFiles(resFn, resBase, problems, projs, vars, 'measure'=measure);
    else 
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resFn :=%A; '.
           'projs := %A; lock:=%A; problems := %A; '.
           'ReadProgram(''%s/RefPhyloTest.drw''); done;" | nice -n 19 %s &',
               wdir, resFn, projs, lock, problems, wdir, darwin64);
        prints(cmd);
        CallSystem( cmd );
        WriteLog('started command: '.cmd);
        vars['content'] := '<p>Computation started...</p>';
    fi:
    return( GenerateTemplate(wdir.'templates/secResult.htmlc', vars) );
end:

StartEcTest := proc(PID:string, params:list, pnames:list)
    fnBase := GetPKeyData(PID)['fnBase'];
    lock  := sprintf('%s.EC.lock',fnBase);
    vars := table('');
    vars['resheader'] := 'Enzyme Classification (EC) conservation test';
    
    pubPrj := GetPublicProjects();

    projs := [op( {op(GetPublicProjects())} minus {GetPKeyData(PID)} )];
    projs := sort( projs, x->x['Title'] );
    sel := [seq(If(length(z)>6 and z[1..6]='pECPrj', parse(z[7..-1]), NULL), z=pnames)];
    projs := [seq(projs[i,'PID'], i=sel), PID];

    measure := params[ SearchArray('pECMeasure',pnames) ];
    
    resBase := sprintf('EC.%a', hash([projs,measure]) );
    resFn := sprintf('%s/%s.drw', resdir, resBase );
    if FileExists(lock) then 
        vars['content'] := HandleLockFile(lock);
    elif FileExists(resFn) then
        Handle2dSimFiles(resFn, resBase, vars, 'measure'=measure);

    else 
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resFn :=%A; '.
           'projs := %A; lock:=%A; measure:=%A; '.
           'ReadProgram(''%s/EcTest.drw''); done;" | nice -n 19 %s &',
               wdir, resFn, projs, lock, measure, wdir, darwin64);
        prints(cmd);
        CallSystem( cmd );
        WriteLog('started command: '.cmd);
        vars['content'] := '<p>Computation started...</p>';
    fi:
    return( GenerateTemplate(wdir.'templates/secResult.htmlc', vars) );
end:

StartGoTest := proc(PID:string, params:list, pnames:list)
    fnBase := GetPKeyData(PID)['fnBase'];
    lock  := sprintf('%s.GO.lock',fnBase);
    vars := table('');
    vars['resheader'] := 'Gene Ontology conservation test';
    exEv := {EXP,IDA,IPI,IMP,IGI,IEP,ISS,ISO,ISA,ISM,IGC,RCA,TAS,NAS,IEA,IC,ND};
    
    pubPrj := GetPublicProjects();

    projs := [op( {op(GetPublicProjects())} minus {GetPKeyData(PID)} )];
    projs := sort( projs, x->x['Title'] );
    sel := [seq(If(length(z)>6 and z[1..6]='pGOPrj', parse(z[7..-1]), NULL), z=pnames)];
    projs := [seq(projs[i,'PID'], i=sel), PID];

    filter := {seq( If(length(z)>6 and z[1..6]='pGOFil', parse(z[7..-1]),NULL), z=pnames)};
    filter := intersect(filter, exEv);
    measure := params[ SearchArray('pGOMeasure',pnames) ];
    
    resBase := sprintf('GO.%a', hash([projs,filter,measure]) );
    resFn := sprintf('%s/%s.drw', resdir, resBase );
    if FileExists(lock) then 
        vars['content'] := HandleLockFile(lock);
    elif FileExists(resFn) then
        Handle2dSimFiles(resFn, resBase, vars, 'measure'=measure);
    else 
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resFn :=%A; filter := %A;'.
               'projs := %A; lock:=%A; measure:=%A; ReadProgram(''%s/GoTest.drw''); done;" | nice -n 19 %s &',
               wdir, resFn, filter, projs, lock, measure, wdir, darwin64);
        prints(cmd);
        CallSystem( cmd );
        WriteLog('started command: '.cmd);
        vars['content'] := '<p>Computation started...</p>';
    fi:
    return( GenerateTemplate(wdir.'templates/secResult.htmlc', vars) );
end:

#################################
# Run Tests                     #
#################################
bsRunTests := proc(params:list, pnames:list)
    if length(params) <> length(pnames) then
       error('unexpected parameters'); fi;

    PID := params[SearchArray('pPID',pnames)];
    vars := table('');
    vars['tit'] := GetPKeyData(PID)['Title'];
    k := SearchArray('pTTEuk1', pnames);
    if k>0 and params[k]='on' then
        # do eukaryotic tree test
        vars['TTEuk1'] := StartTreeTest(PID,'Eukaryota',params, pnames);
    fi;

    k := SearchArray('pTTFun1', pnames);
    if k>0 and params[k]='on' then
        # do fungi tree test
        vars['TTFun1'] := StartTreeTest(PID,'Fungi',params, pnames);
    fi;

    k := SearchArray('pTTBac1', pnames);
    if k>0 and params[k]='on' then 
        # do bacteria tree test
        vars['TTBac1'] := StartTreeTest(PID,'Bacteria',params, pnames);
    fi;

    k := SearchArray('pRefPhylo1', pnames);
    if k>0 and params[k]='on' then
        # do reference phylogeney based test
        vars['RefPhyl'] := StartRefPhyloTest(PID, params, pnames);
    fi;

    k := SearchArray('pGO1',pnames);
    if k>0 and params[k]='on' then
        vars['GO'] := StartGoTest(PID, params, pnames)
    fi:

    k := SearchArray('pEC1', pnames);
    if k>0 and params[k]='on' then
        vars['EC'] := StartEcTest(PID,params, pnames);
    fi:

    return( GenerateTemplate(wdir.'templates/testResults.html', vars) );
end:

##########################################
# Not yet implemented functions         #
##########################################
NotImplemented := proc(text:string)

vars := table('');
vars['function'] := text;

return(GenerateTemplate(wdir.'templates/notimpl.html',vars));
end:

# -------------------------------------------------------------------------
printlevel := 2;
if DEBUG then 
    Cookies := table(NULL);
    printlevel := 4;
else
    lprint('Server started, pid =',getpid());
    RunServer() 
fi;
