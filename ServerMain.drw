##############################################
# Backend for the OMA browser.             #
# Reads the 'Din' pipe and executes the      #
# commands.                     #
##############################################
if not assigned(DEBUG) then DEBUG := false fi:
if not assigned(RUNLOCAL) then RUNLOCAL := true fi:
noRemember := true;
SetRandSeed();
Set(printgc=false); Set(gc=1e8):

ReadProgram('lib/darwinit');

print(getpid());
version();
t:=TimedCallSystem('ulimit -a'):
prints(t[2]);
ReadProgram(wdir.'nogos.drw');


darwin64 := If(RUNLOCAL,'/local/darwin_source/darwin64 -q', 
               '/home/darwin/v2/source/darwin64 -q');

logfile := wdir.'server.log';
if FileExists(omaDBpath.'/ServerIndexed.db') then
else printf('Browser not found\n'); quit fi;

ReadProgram(omaDBpath.'Summaries.drw');
GS := GenomeSummaries:
LoadGenomeStartIDs():
google_analytics := '</body>'; #ReadRawFile(wdir.'templates/analytics.htmlc'):
#IDIndex := traperror(ReadDb(omaDBpath.'IDIndex.db'));
#IndDB :=ReadDb(omaDBpath.'ServerIndexed.db');   # with the descriptions
#SeqsDB :=ReadDb(omaDBpath.'ServerSeqs.db'); # with the sequences
#VPsDB :=ReadDb(omaDBpath.'ServerVPs.db'); # with the VPs
#NS := length(genomes):


# --------------------- General Functions -------------------------

#################################
# Run server is the main loop   #
# that runs forever.            #
#################################
RunServer := proc()
global StartTime,nReq;
WriteLog('server started on '.hostname().': '.getpid());
inpipe := '/tmp/BSin.'.hostname();
StartTime := date();
nReq :=0;
do 
    OpenReading(inpipe);
    do
        t := ReadRawLine();
        if t=EOF then break fi;
        pt := t;
        cp := SearchString('cookies=table([{NULL}]',pt);
        if cp>-1 then pt := pt[1..cp-1].pt[cp+35..-1] fi;
        WriteLog(pt[1..-2].' requested');
        if t[1..7]='Request' then 
        e := traperror(eval(parse(t)));
        if e=lasterror then 
             WriteLog(sprintf('*** ERROR: %a',e));
             # if too many files are open, it can no longer
             # create a pipe. We need to restart
             if e='Cannot create pipe' then quit fi;
        else
             WriteLog(pt[1..-2].' completed');
             nReq := nReq+1;
        fi;
    fi;
    od;
od;
end:


###############################
# Write log                   #
###############################
WriteLog := proc(s:string)
OpenAppending(logfile);
printf('%s (%s, %d): %s\n',date(),hostname(),getpid(),s);
OpenAppending(previous);
end:

#######################################
# Page to display in case of an error #
#######################################
ErrorPage := proc(filename:string,msg:string)
print(msg);
vars := table(''):
#vars['header'] := MakeHeader('SearchDb','');
vars['message'] := msg;
return(GenerateTemplate(wdir.'templates/error.html',vars));
end:

#########################################
# Write resulting page                #
# We write first to a normal file and     #
# then cat the fiel to the pipe. In    #
# the case noone reads the pipe, we    #
# wait at most 2 seconds and then    #
# return.                 #
#########################################
WriteResult := proc(filename:string, html:string) 
OpenWriting(filename.'tmp');
p := SearchString('</body>',html);
if p>-1 then
    prints(html[1..p]);
    prints(google_analytics);
    prints('</html>');
else
    prints(html);
fi;
OpenWriting(previous);
TimedCallSystem('cat '.filename.'tmp >>'.filename,10);
CallSystem('rm '.filename.'tmp');
end:

###########################################
# Function to create links to other pages.#
###########################################

# if an ID contains several IDs, extract the first one
#TrimID := proc(id_:string)
#id := id_;
#while id[1]=' ' do id := id[2..-1] od:
#p1 :=  SearchString(';',id);
#p2 :=  SearchString(' ',id);
#p3 :=  SearchString('.repet',id);
#p4 :=  SearchString(' {',id);
#if max(p1,p2,p3,p4)>0 then
#    p := min(op({p1,p2,p3,p4} minus {-1}));
#    return(id[1..p])
#else
#    return(id)
#fi;
#end:
#
#EntryHref := proc(id:{posint,string}, text:string)
## we add leading zeros for the MAlignments to look ok
#if type(id,string) then
#    nr := id
#else
#    nr := sprintf('%07d',id)
#fi;
#tooltip := '';
#if length(text)>5 and member(text[1..5],genomes) then
#    sp := text[1..5];
#    tooltip := ' title="'.GS[sp,SCINAME];
#    cn := GS[sp,COMMONNAME];
#    if cn<>'' then tooltip := tooltip.' ('.cn.')' fi;
#    tooltip := tooltip.'"';
#fi;
#t:=sprintf('<a href="gateway.pl?f=DisplayEntry&amp;p1=%s"%s>%s</a>',
#                nr,tooltip,text);
#return(t);
#end:
#
#GroupHref := proc(nr:{0,posint}, text:string)
#if nr=0 then return('-') fi;
#t:=sprintf('<a href="gateway.pl?f=DisplayGroup&amp;p1=%d">%s</a>',nr,text);
#return(t);
#end:
#
#OSHref := proc(os:string, text:string)
#t:=sprintf('<a href="gateway.pl?f=DisplayOS&amp;p1=%s">%s</a>',os,text);
#return(t);
#end:
#
#MSAHref := proc(og:posint, text:string)
#t:=sprintf('<a href="gateway.pl?f=DisplayMSA&amp;p1=%d">%s</a>',og,text);
#return(t);
#end:
#
#CloseGroupsHref := proc(og:posint, text:string)
#t:=sprintf('<a href="gateway.pl?f=DisplayCloseGroups&amp;p1=%d">%s</a>',og,text);
#return(t);
#end:
#
#RelatedHref := proc(og:posint, text:string)
#t:=sprintf('<a href="gateway.pl?f=DisplayRelated&amp;p1=%d">%s</a>',og,text);
#return(t);
#end:
#
#OntoHref := proc(og:posint, text:string)
#t:=sprintf('<a href="gateway.pl?f=DisplayOnto&amp;p1=%d">%s</a>',og,text);
#return(t);
#end:
#
#DloadHref := proc(og:posint, text:string; form:{'fasta','darwin'})
#t:= '<a href="gateway.pl?f=GroupDownload&amp;p1='.string(og);
#if assigned(form) then
#    t := t.'&amp;p2='.form;
#fi;
#t:= t.'">'.text.'</a>';
#return(t);
#end:
#
#HelpLink := proc(fname:string)
#return('<a href="javascript:help(''/help/'.fname.''')"><sup>?</sup></a>');
#end:
#
#Kingdom := proc(os:string)
#k := GS[os,'KINGDOM'][1]:
#if k='E' then return('<span class="Eukaryota">[E]</span>')
#elif k='B' then return('<span class="Bacteria">[B]</span>')
#else return('<span class="Archaea">[A]</span>') fi;
#end:
#
## Hrefs to external sources are in a lib file
#ReadProgram(wdir.'/lib/XternalHrefs.drw');
#
#######################################
## Keywords for OMA groups         #
## based on ID and DE tags         #
#######################################
#Keywords := proc(og:posint)
#if assigned(KeywordT) then return(KeywordT[og]) fi;
#res := {op(Orthologous[og])} minus {0};
## first step: try to find a repeated id
## this tries to find the common gene name
#ids := table(0);
#for nr in res do
#    e := Entry(nr);
#    id := SearchTag('ID',e);
#    if length(id)>450 then id := id[1..450] fi;
#    p := SearchString('.repet',id);
#    if p>-1 then id := id[1..p] fi;
#    ids[id] := ids[id]+1;
#od:
#maxc := 0;
#for z in Indices(ids) do
#    if ids[z]>maxc then maxc:=ids[z]; maxid := z fi;
#od:
##if maxc>1 then cid := maxid else cid := '-' fi;
#if maxc>1 then cid:=maxid else cid := '-' fi;
## second step: make a list of all words in DE
## that appear more than once
#kws := table(0);
#des := []:
#for nr in res do
#    kwe := table(0);
#    e := Entry(nr);
#    de := lowercase(SearchTag('DE',e));
#    des := append(des,de);
#    ws := SearchDelim(' ',de);
#    for w in ws do
#    if member(w,['',' ']) then next fi;
#    if w[1]=' ' then w2 := w[2..-1] else w2:=w fi;
#    if w[-1]=',' then w2 := w2[1..-2] fi;
#    if member(w2,['',' ']) then next fi;
#    if length(w2)>4 and w2[1..5]='[goid' then next fi;
#    if length(w2)>7 and (w2[-1]=']' or w2[-2..-1]='];') then next fi;
#    if length(w2)>8 and w2[1..3]='sp|' then next fi;
#    if length(w2)=7 and w2[1]='y' and    # YEAST IDs, e.g. YER169W 
#        SearchString('Saccharomyces cerevisiae',de)>-1 then next fi;
#    if w2[1]='y' and w2[-1]='c' then next fi;
#    if w2[-1]='%' then next fi;
#    kwe[w2] := 1;
#    od:
#    kws := kws+kwe;
#od:
#w2 := []:
#s2 := {};
#for z in Indices(kws) do
#    if kws[z]>1 then 
#    w2 := append(w2,z);
#    s2 := s2 union {[z,kws[z]]};
#    fi;
#od:
#if w2=[] then return(cid) fi;
#w2 := {op(w2)};
## third step: try to make seqs of words
## that appear more than once
## score = # of words * # of occurences
#len := 1;
#s2cur := s2;
#while s2cur<>{} do
#    s2new := {};
#    newD := [seq(false,i=1..length(des))]:
#    len := len+1;
#    for w in w2 do for s in s2cur do
#    c := s[1].' '.w;
#    n := 0;
#    for i to length(des) do
#        if SearchString(c,des[i])>-1 then
#        n := n+1;
#        newD[i] := true;
#        fi;
#    od:
#    if n>1 then
#        s2new := s2new union {[c,len*n]}    
#    fi;
#    od od;
#    s2 := s2 union s2new;
#    s2cur := s2new;
#    des := [seq(If(newD[i],des[i],NULL),i=1..length(des))];
#od:
#s2 := sort(s2,x->-x[2]);
## make sure best KW is not a no-go
#kw := '';
#for i to length(s2) do
#    if length(s2[i,1])<2 then next fi;
#    if not member(s2[i,1],NoGos) then kw := s2[i,1]; break fi;
#od:
#if kw='' then return(cid) fi;
## find a case
#for nr in res do
#    e := Entry(nr);
#    de := SearchTag('DE',e);
#    p := SearchString(kw,de);
#    if p>-1 then break fi;
#od:
#printf('KW%d: %s\n',og,de[p+1..p+length(kw)]);
#return(de[p+1..p+length(kw)]);
#end:
#
######################################
## Get the OG number for a PersGrID  #
######################################
#GetGroupNr := proc(og:{posint,string,0})
#global DB,SeqsDB,IndDB;
## 1st: if an int then it is the number
#if type(og, integer) then return(og) fi;
## 2nd: try ID index, display corresponding group
#nr := FindEntryNr(og);
#if nr>0 and nr<=DB[TotEntries] then
#   og_ := SearchTag('OG',Entry(nr));
#   if og_='0' then return('singleton') fi;
#   if og_<>'' then return(parse(og_)) fi;
#fi;
## 3rd: find fingerprint in seq. DB
#if length(og)<4 then return(0) fi;
#DB := SeqsDB;
#pes := SearchSeqDb(uppercase(og));
#if pes[1,2]-pes[1,1]=-1 then return(0) fi;
#print(Entry(pes));
#es := [seq(GetEntryNumber(e),e=[Entry(pes)])];
#DB := IndDB;
#print(es);
#ogs := {seq(SearchTag('OG',Entry(en)),en=es)};
#print(ogs);
#if length(ogs)=1 then
#    return(parse(ogs[1]));
#elif length(es)=0 then 
#    return(0);
#else
#    return('ambiguous');
#fi;
#end:

# Consistant display of species name
SpeciesName := proc(os:string)
K := GS[os,KINGDOM];
if K='Eukaryota' then K := '<span class="Eukaryota">[E]</span>&nbsp;'
elif K='Archaea' then K := '<span class="Archaea">[A]</span>&nbsp;'
else K := '<span class="Bacteria">[B]</span>&nbsp;' fi;
N := '<b>'.GS[os,SCINAME];
p := SearchString('(',N);
if p>-1 then N := N[1..p].'</b>'.N[p+1..-1]
else N := N.'</b>' fi;
return(K.'<span class="species">'.N.'</span>');
end:

# --------------- Server Functions -------------------------------


#################################################
# the main function that processes all requests.#
#################################################
Request := proc(funcname:string,filename:string;
    'params'=(params:list), 
    'pnames'=(pnames:list), 
    'cookies' = (cookies:table))
global DB,InDB,Cookies;
WriteResult(filename.'.alive','ALIVE\n');

if assigned(cookies) then
   Cookies := cookies;
else
   Cookies := table(NULL);
fi;

if funcname = 'Index' then
    html := traperror(bsIndex(op(params)));
elif funcname = 'UploadData' then 
    html := traperror(bsUploadData(op(params)));
elif funcname = 'MapData' then
    html := traperror(bsMapData(op(params)));
elif funcname = 'MapRels' then
    html := traperror(bsMapRels(op(params)));
elif funcname = 'RunTests' then
    html := traperror(bsRunTests(params,pnames));

elif funcname = 'Service' then
    html := traperror(bsService());
# cookies/settings
elif funcname = 'ViewCookie' then
    html := traperror(bsViewCookie());
elif funcname = 'Settings' then
    html := traperror(bsSettings());
else
    html := traperror(NotImplemented(funcname));
fi;

if html=lasterror then
    print(lasterror);
    res := '';
    for z in [lasterror] do
        res := res . sprintf('%a ',z);
    od:
    html := ErrorPage(filename,res);
fi;

WriteResult(filename,html);

return(true);

end:


####################################
# Index Page                       #
####################################
bsIndex := proc(;itype:string)

if itype='params' then
    if Cookies['FormSize']<>NULL then
      itype := Cookies['FormSize'];
    else itype := 'small' fi;
fi;

vars := table('');
vars['nspecies'] := string(NS);
vars['logo'] := '/OMAbrowser.gif';

return(GenerateTemplate(wdir.'templates/index.html',vars));
end:


####################################
# Upload Data                      #
####################################
bsUploadData := proc(fnBase:string, tit:string, nrProts, nrOrth)
    id := AddPKeyData(tit,fnBase):
    vars := table('');
    vars['tit'] := tit;
    vars['nrProt'] := nrProts;
    vars['nrOrth'] := nrOrth;
    vars['PID'] := id;
    return(GenerateTemplate(wdir.'templates/uploaded.html',vars));
end:

#################################
# MapData                       #
#################################
bsMapData := proc(PID:string)
    fnBase := GetPKeyData(PID)['fnBase'];
    seqMapResFn := fnBase.'.seqmap';
    lock := fnBase.'.lock';

    vars := table(''):
    vars['tit'] := GetPKeyData(PID)['Title'];

    if FileExists(seqMapResFn) then
        if FileExists(lock) and UTCTime()-FileStat(seqMapResFn)['st_mtime'] < 10 then
           # still computing
           vars['content'] := 'Still computing';
        else
           # visualize current mapping
           ReadProgram(seqMapResFn); #load MappingComb, TotProts, SPS and Colls
           prNS := length(MappingComb);
           cnts := CreateArray(1..prNS,1..NS+1):
           for pg to prNS do for g to NS+1 do cnts[pg,g] := length(MappingComb[pg,g]) od od:
           
           t := '<form name="specmap" action="gateway.pl" method="post">\n<table class="dropdown" id="species_mapping">\n'.
                '<tr><th>extracted species</th><th># protein uploaded</th><th>mapped species</th><th># mappable proteins</th></tr>';
           jsMap := '[';
           for pg to prNS do
               t := t.sprintf('<tr><td>%a</td><td>%d</td><td>'.
	              '<select name="p%04d" onChange="changeMapCnt(%d);">\n', 
                    SPS[pg], TotProts[pg], pg, pg);
               ord := sort([seq(g,g=1..NS)], x->-cnts[pg,x]);
               t := t.'<option value="n.a.">no mapping</option>\n';
	       jsMap := jsMap . If(pg=1,'',',') . '{"n.a.":0';
               for p to NS while cnts[pg,ord[p]]>0 do 
                   t := t.sprintf(' <option value="%s"%s>%s - %s</option>\n',
                          genomes[ord[p]], If(p=1,' selected="selected"',''),genomes[ord[p]],
                          GS[genomes[ord[p]],SCINAME]);
	           jsMap := jsMap.sprintf(',"%s":%d', genomes[ord[p]], cnts[pg,ord[p]]);
               od:
               t := t.sprintf('</select></td><td>%d</td></tr>\n', cnts[pg,ord[1]]);
	       jsMap := jsMap.'}';
           od:
           t := t.sprintf('</table>\n<input type="hidden" name="p0" value="%s" />\n',PID);
           t := t.'<input type="hidden" name="f" value="MapRels"/>\n'.
                '<input type="submit" value="Next"/></form>\n';
           jsMap := jsMap.'];';
                    
           vars['content'] := t;
	   vars['jsMappingArray'] := jsMap;
        fi;
        return( GenerateTemplate(wdir.'templates/sequenceMapping.html',vars) );
    fi:

    # check if mapping process is already running
    if FileExists(lock) then
        if IsLockProcessAlive(lock) then
            # still computing
            vars['content'] := '<p>Still computing...</p>';
        else
            # error page: mapping crashed
            vars['content'] := '<p>Mapping crashed</p>';
        fi;
        return( GenerateTemplate(wdir.'templates/sequenceMapping.html',vars) );
    fi:

    # the mapping did not start. start it! :-)
    CallSystem('touch '.lock);
    # start MSA as background process
    cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); spListFn:=''%s''; seqFn := ''%s''; '.
                  'resFn := ''%s''; lock:=''%s''; ReadProgram(''%s/ComputeSeqMapping.drw''); done" '.
                  '| nice -n 19 %s &',
                  wdir, fnBase.'.sps', fnBase.'.seqs', seqMapResFn, lock, wdir, darwin64);
    WriteLog('started command: '.cmd);
    prints(cmd);

    CallSystem( cmd );
    vars['content'] := 'Start computing mapping';
    html := GenerateTemplate(wdir.'templates/sequenceMapping.html',vars);
    return(html);
end:

bsMapRels := proc(PID:string)
    global SPS:
    fnBase := GetPKeyData(PID)['fnBase'];
    dbFn := fnBase.'.db';
    seqMapFn := fnBase.'.seqmap';
    lock := fnBase.'.lock';

    vars := table(''):
    vars['tit'] := GetPKeyData(PID)['Title'];

    if FileExists(dbFn) then
        if FileExists(lock) and UTCTime()-FileStat(dbFn)['st_mtime'] < 10 then
           # still computing
           vars['content'] := 'Still computing';
        else
           # provide test selection page:
           publicProjects := {seq(z['Title'], z=GetPublicProjects())} minus {GetPKeyData(PID)['Title']};
           vars['hasFungi'] := 'DISABLED';
           vars['TTprojects'] := ConcatStrings(
              [seq(sprintf('<input type="checkbox" name="pTTPrj%d" class="inputCheckbox" />%s<br/>',
                           pNr,publicProjects[pNr]), pNr=1..length(publicProjects))],'\n');
           vars['GOprojects'] := ConcatStrings(
              [seq(sprintf('<input type="checkbox" name="pGOPrj%d" class="inputCheckbox" />%s<br/>',
                           pNr,publicProjects[pNr]), pNr=1..length(publicProjects))],'\n');
           vars['PID'] := PID;
           return( GenerateTemplate(wdir.'templates/testSelection.html',vars) );
        fi:
    fi:

    # check if mapping process is already running
    if FileExists(lock) then
        if IsLockProcessAlive(lock) then
            # still computing
            vars['content'] := '<p>Still computing...</p>';
        else 
            # error page: mapping crashed
            vars['content'] := '<p>Mapping crashed</p>';
        fi;
        return( GenerateTemplate(wdir.'templates/sequenceMapping.html',vars) );
    fi:

    # the mapping did not start. start it! :-)
    CallSystem('touch '.lock);
    SPS := 0; ReadProgram(fnBase.'.sps'); assert(SPS<>0);
    if nargs<=length(SPS) then error('too few arguments received') fi;
    orgMap := [seq( SearchArray(z, genomes), z=[args[2..length(SPS)+1]] )];

    # start computation as background process
    cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resDBfn:=''%s''; seqmapfn:= ''%s''; '.
                  'relsinfn := ''%s''; lock:=''%s''; orgMap := %A; '.
                  'ReadProgram(''%s/ComputeRelMapping.drw''); done;" | nice -n 19 %s &',
                  wdir, dbFn, seqMapFn, fnBase.'.rels', lock, orgMap, wdir, darwin64);
    WriteLog('started command: '.cmd);
    prints(cmd);

    CallSystem( cmd );
    vars['content'] := 'Start computing mapping';
    html := GenerateTemplate(wdir.'templates/sequenceMapping.html',vars);
    return(html);
end:

IsLockProcessAlive := proc(lock:string)
    if not FileExists(lock) then error('lockfile not present') fi:
    
    # wait for result page but also check, whether job is still running
    lockOldAndEmpty := FileStat(lock)['st_size']=0 and UTCTime()-FileStat(lock)['st_mtime']>60;
    procDeath := false;
    if FileStat(lock)['st_size']>0 then 
        pid := SplitLines(ReadRawFile(lock))[1];
        t := TimedCallSystem('ps -eo pid | grep -w '.pid,4);
        procDeath := evalb(t[1]<>0);
    fi:
    return( not(lockOldAndEmpty or procDeath) );
end:


StartTreeTest := proc(PID:string, king:string, params:list, pnames:list)
    global RFstat;
    fnBase := GetPKeyData(PID)['fnBase'];
    lock  := sprintf('%s.%s.lock',fnBase,king);
    vars := table('');
    vars['case'] := king;
    vars['resheader'] := 'Species Tree Discordance Test - Dataset '.king;
    
    pubPrj := GetPublicProjects();

    projs := [op( {op(GetPublicProjects())} minus {GetPKeyData(PID)} )];
    projs := sort( projs, x->x['Title'] );
    sel := [seq(If(length(z)>6 and z[1..6]='pTTPrj', parse(z[7..-1]), NULL), z=pnames)];
    projs := [seq(projs[i,'PID'], i=sel), PID];
    resFn := sprintf('%s/TreeTest.%s.%a.drw', resdir, king, hash(projs) );
    if FileExists(lock) then
        if IsLockProcessAlive(lock) then
	    t := SplitLines(ReadRawFile(lock));
	    msg := '';
	    if length(t)>1 then 
	        msg := '<p><b>Status:</b> '.t[2,1..-2].'</p>';
	    fi:
            vars['content'] := msg.'<p>We are still computing the final result...</p>';
        else
	    CallSystem('rm -f '.lock);
	    vars['content'] := '<p>Computation crashed. Try to restart by resubmitting request.</p>'; 
        fi:
    elif FileExists(resFn) then
        RFstat := 0;
        traperror(ReadProgram(resFn)):
	if RFstat=0 then 
            vars['content'] := '*** ERROR: An unexpected error occured: '.RFstat;
        else 
            tab := Table( border, gutter=2, ColAlign(l,r,c), 
	        Row('Project','# trees','avg RF distance genetree - speciestree'));
            for z in RFstat do 
	        tab := append(tab, Row(z[Description], z[Number], z[MeanVar]));
	    od:
            vars['content'] := HTMLC(tab);
	fi;
    else 
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resFn :=''%s''; problem := ''%s/TreeCat_%s.drw''; '.
               'projs := %A; lock:=''%s''; ReadProgram(''%s/TreeTest.drw''); done;" | nice -n 19 %s &',
               wdir, resFn, datdir, king, projs, lock, wdir, darwin64);
        prints(cmd);
        CallSystem( cmd );
        WriteLog('started command: '.cmd);
        vars['content'] := '<p>Computation started...</p>';
    fi:
    return( GenerateTemplate(wdir.'templates/secResult.htmlc', vars) );
end:


StartGoTest := proc(PID:string, params:list, pnames:list)
    global Sims;
    fnBase := GetPKeyData(PID)['fnBase'];
    lock  := sprintf('%s.GO.lock',fnBase);
    vars := table('');
    vars['resheader'] := 'Gene Ontology conservation test';
    exEv := {EXP,IDA,IPI,IMP,IGI,IEP,ISS,ISO,ISA,ISM,IGC,RCA,TAS,NAS,IEA,IC,ND};
    
    pubPrj := GetPublicProjects();

    projs := [op( {op(GetPublicProjects())} minus {GetPKeyData(PID)} )];
    projs := sort( projs, x->x['Title'] );
    sel := [seq(If(length(z)>6 and z[1..6]='pGOPrj', parse(z[7..-1]), NULL), z=pnames)];
    projs := [seq(projs[i,'PID'], i=sel), PID];

    filter := {seq( If(length(z)>6 and z[1..6]='pGOFil', parse(z[7..-1]),NULL), z=pnames)};
    filter := intersect(filter, exEv);
    measure := params[ SearchArray('pGOMeasure',pnames) ];
    
    resFn := sprintf('%s/GO.%a.drw', resdir, hash([projs,filter,measure]) );
    if FileExists(lock) then
        if IsLockProcessAlive(lock) then
	    t := SplitLines(ReadRawFile(lock));
	    msg := '';
	    if length(t)>1 then 
	        msg := '<p><b>Status:</b> '.t[2,1..-2].'</p>';
	    fi:
            vars['content'] := msg.'<p>We are still computing the final result...</p>';
        else
	    CallSystem('rm -f '.lock);
	    vars['content'] := '<p>Computation crashed. Try to restart by resubmitting request.</p>'; 
        fi:
    elif FileExists(resFn) then
        Sims := 0;
        traperror(ReadProgram(resFn)):
	if Sims=0 then 
            vars['content'] := '*** ERROR: An unexpected error occured: '.Sims;
        else 
            tab := Table( border, gutter=2, ColAlign(l,r,c), 
	        Row('Project','# ortholog relations',measure));
            for z in Sims do 
	        tab := append(tab, Row(z[Description], z[Number], z[MeanVar]));
	    od:
            vars['content'] := HTMLC(tab);
	fi;
    else 
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resFn :=%A; filter := %A;'.
               'projs := %A; lock:=%A; measure:=%A; ReadProgram(''%s/GoTest.drw''); done;" | nice -n 19 %s &',
               wdir, resFn, filter, projs, lock, measure, wdir, darwin64);
        prints(cmd);
        CallSystem( cmd );
        WriteLog('started command: '.cmd);
        vars['content'] := '<p>Computation started...</p>';
    fi:
    return( GenerateTemplate(wdir.'templates/secResult.htmlc', vars) );
end:

#################################
# Run Tests                     #
#################################
bsRunTests := proc(params:list, pnames:list)
    if length(params) <> length(pnames) then
       error('unexpected parameters'); fi;

    PID := params[SearchArray('pPID',pnames)];
    vars := table('');
    vars['tit'] := GetPKeyData(PID)['Title'];
    k := SearchArray('pTTEuk1', pnames);
    if k>0 and params[k]='on' then
        # do eukaryotic tree test
        vars['TTEuk1'] := StartTreeTest(PID,'Eukaryota',params, pnames);
    fi;

    k := SearchArray('pTTFun1', pnames);
    if k>0 and params[k]='on' then
        # do fungi tree test
        vars['TTFun1'] := StartTreeTest(PID,'Fungi',params, pnames);
    fi;

    k := SearchArray('pTTBac1', pnames);
    if k>0 and params[k]='on' then 
        vars['TTBac1'] := StartTreeTest(PID,'Bacteria',params, pnames);
        # do bacteria tree test
    fi;

    k := SearchArray('pGO1',pnames);
    if k>0 and params[k]='on' then
        vars['GO'] := StartGoTest(PID, params, pnames)
    fi:
    return( GenerateTemplate(wdir.'templates/testResults.html', vars) );
end:

##########################################
# Not yet implemented functions         #
##########################################
NotImplemented := proc(text:string)

vars := table('');
vars['function'] := text;

return(GenerateTemplate(wdir.'templates/notimpl.html',vars));
end:

# -------------------------------------------------------------------------
printlevel := 2;
if DEBUG then 
    Cookies := table(NULL);
    printlevel := 4;
else
    lprint('Server started, pid =',getpid());
    RunServer() 
fi;
