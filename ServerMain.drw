##############################################
# Backend for the BenchmarkWebservice        #
# Reads the 'BSin' pipe and executes the     #
# commands.                                  #
##############################################
if not assigned(DEBUG) then DEBUG := false fi:
if not assigned(RUNLOCAL) then RUNLOCAL := true fi:
noRemember := true;
SetRandSeed();
Set(printgc=false); Set(gc=1e8):

ReadProgram('lib/darwinit');

print(getpid());
version();
t:=TimedCallSystem('ulimit -a'):
prints(t[2]);
ReadProgram(wdir.'nogos.drw');


darwin64 := If(RUNLOCAL,'/local/bin/darwin64 -q', 
               '/home/darwin/v2/source/darwin64 -q');

logfile := wdir.'server.log';
if FileExists(omaDBpath.'/ServerIndexed.db') then
else printf('Browser not found\n'); quit fi;

ReadProgram(omaDBpath.'Summaries.drw');
GS := GenomeSummaries:
LoadGenomeStartIDs():
google_analytics := ReadRawFile(wdir.'templates/analytics.htmlc'):


# --------------------- General Functions -------------------------

#################################
# Run server is the main loop   #
# that runs forever.            #
#################################
RunServer := proc()
global StartTime,nReq;
WriteLog('server started on '.hostname().': '.getpid());
inpipe := '/tmp/BSin.'.hostname();
StartTime := date();
nReq :=0;
do 
    OpenReading(inpipe);
    do
        t := ReadRawLine();
        if t=EOF then break fi;
        pt := t;
        cp := SearchString('cookies=table([{NULL}]',pt);
        if cp>-1 then pt := pt[1..cp-1].pt[cp+35..-1] fi;
        WriteLog(pt[1..-2].' requested');
        if t[1..7]='Request' then 
        e := traperror(eval(parse(t)));
        if e=lasterror then 
             WriteLog(sprintf('*** ERROR: %a',e));
             # if too many files are open, it can no longer
             # create a pipe. We need to restart
             if e='Cannot create pipe' then quit fi;
        else
             WriteLog(pt[1..-2].' completed');
             nReq := nReq+1;
        fi;
    fi;
    od;
od;
end:


###############################
# Write log                   #
###############################
WriteLog := proc(s:string)
OpenAppending(logfile);
printf('%s (%s, %d): %s\n',date(),hostname(),getpid(),s);
OpenAppending(previous);
end:

#######################################
# general Error message handler       #
#######################################
UNEXPECTED_ERROR_MSG := proc(fun:string, var:string)
   msg := sprintf('*** An unexpected Error occured in %s (%s). '.
          'Please report to adrian.altenhoff@inf.ethz.ch. Thanks', fun, var);
   WriteLog(msg);
   return(msg);
end:
#######################################
# Page to display in case of an error #
#######################################
ErrorPage := proc(filename:string,msg:string)
print(msg);
vars := table(''):
#vars['header'] := MakeHeader('SearchDb','');
vars['message'] := msg;
return(GenerateTemplate(wdir.'templates/error.html',vars));
end:

#########################################
# Write resulting page                #
# We write first to a normal file and     #
# then cat the fiel to the pipe. In    #
# the case noone reads the pipe, we    #
# wait at most 2 seconds and then    #
# return.                 #
#########################################
WriteResult := proc(filename:string, html:string) 
OpenWriting(filename.'tmp');
p := SearchString('</body>',html);
if p>-1 then
    prints(html[1..p]);
    prints(google_analytics);
    prints('</html>');
else
    prints(html);
fi;
OpenWriting(previous);
TimedCallSystem('cat '.filename.'tmp >>'.filename,10);
CallSystem('rm '.filename.'tmp');
end:
# --------------- Server Functions -------------------------------


#################################################
# the main function that processes all requests.#
#################################################
Request := proc(funcname:string,filename:string;
    'params'=(params:list), 
    'pnames'=(pnames:list), 
    'cookies' = (cookies:table))
global DB,InDB,Cookies;
WriteResult(filename.'.alive','ALIVE\n');

if assigned(cookies) then
   Cookies := cookies;
else
   Cookies := table(NULL);
fi;

if funcname = 'Index' then
    html := traperror(bsIndex(op(params)));
elif funcname = 'UploadData' then 
    html := traperror(bsUploadData(op(params)));
elif funcname = 'RedoProjectMapping' and length(params)=8 then
    html := traperror(bsUploadData(op(params)));
elif funcname = 'MapData' then
    html := traperror(bsMapData(op(params)));
elif funcname = 'MapRels' then
    html := traperror(bsMapRels(op(params)));
elif funcname = 'CheckRelMap' then
    html := traperror(bsCheckRelMap(params[1]));
elif funcname = 'TestSelection' then
    html := traperror(bsTestSelection(op(params))); 
elif funcname = 'RunTests' then
    html := traperror(bsRunTests(params,pnames));
elif funcname = 'CheckResults' then
    lprint(params);
    html := traperror(bsCheckResults(params[1]));
elif funcname = 'ShowProject' then
    html := traperror(bsShowProject(If(type(params,list),params[1],NULL)));
elif funcname = 'Service' then
    html := traperror(bsService());
# cookies/settings
elif funcname = 'ViewCookie' then
    html := traperror(bsViewCookie());
elif funcname = 'Settings' then
    html := traperror(bsSettings());
else
    html := traperror(NotImplemented(funcname));
fi;

if html=lasterror then
    print(lasterror);
    res := '';
    for z in [lasterror] do
        res := res . sprintf('%a ',z);
    od:
    html := ErrorPage(filename,res);
fi;

WriteResult(filename,html);

return(true);

end:


####################################
# Index Page                       #
####################################
bsIndex := proc(;itype:string)

if itype='params' then
    if Cookies['FormSize']<>NULL then
      itype := Cookies['FormSize'];
    else itype := 'small' fi;
fi;

vars := table('');
vars['nspecies'] := string(NS);
vars['logo'] := '/OMAbrowser.gif';

return(GenerateTemplate(wdir.'templates/index.html',vars));
end:

bsShowProject := proc()
    if nargs=1 then 
        prjs := [GetPKeyData(args[1])];
    elif nargs=0 then
        prjs := GetPublicProjects('RefSet5');
    else error('unexpected parameters');
    fi;
    prjs := sort(prjs, x->x['Title']);

    vars := table(''):
    cont := []:
    for p in prjs do
        t := table('');
        for key in ['Description','Title','Website'] do
            t[key] := p[key];
        od:
        path := p['fnBase']; 
        for k from length(path) to 1 by -1 while path[k]<>'/' do od:
        datafn := rawdir.path[k+1..-1].'.raw.gz';
        dataUrl := rawurl.path[k+1..-1].'.raw.gz';
        if length(FileStat(datafn))=0 then 
            t['hasData'] := false; t['Predictions'] := 'n/a'; 
        else t['hasData'] := true; t['Predictions'] := dataUrl; 
        fi;
        cont := append(cont, GenerateTemplate(wdir.'templates/secProject.htmlc',t));
    od:
    vars['content'] := ConcatStrings(cont,'\n');
    vars['title'] := 'Overview of '.If(nargs=0,'all public projects', prjs[1,'Title']);
    return( GenerateTemplate(wdir.'templates/showProjects.html',vars));
end:



####################################
# Upload Data                      #
####################################
bsUploadData := proc(fnBase:string, tit:string, nrProts, nrOrth, reference,
    isPublic, methDesc, methURL)
    lprint(args);
    id := AddPKeyData(tit,fnBase, 'NSeqSub'=nrProts, 'NOrthSub'=nrOrth,
        'reference'=reference,'description'=methDesc,'url'=methURL,
        'isPublic'=isPublic):
    return('Location: gateway.pl?f=MapData&p1='.id.'\n\n');
end:

#################################
# MapData                       #
#################################
bsMapData := proc(PID:string)
    pKey := GetPKeyData(PID);
    fnBase := pKey['fnBase'];
    seqMapResFn := fnBase.'.seqmap';
    lock := fnBase.'.lock';

    vars := table(''):
    vars['tit'] := pKey['Title'];
    vars['nrOrth'] := pKey['NOrthSub'];
    vars['nrProt'] := pKey['NSeqSub'];
    vars['reloadin'] := 10;
    vars['PID'] := PID;

    if FileExists(lock) then
        vars['mappingStatus'] := HandleLockFile(lock);
	return( GenerateTemplate(wdir.'templates/uploaded.html',vars) );
    elif pKey['ref']<>'OMA' then
        return('Location: gateway.pl?f=MapRels&p1='.PID.'\n\n');
    elif FileExists(seqMapResFn) then
        # visualize current mapping
        ReadProgram(seqMapResFn); #load MappingComb, TotProts, SPS and Colls
        prNS := length(MappingComb);
        NS := NrOfGenomes('OMA'); 
        cnts := CreateArray(1..prNS,1..NS+1):
        for pg to prNS do for g to NS+1 do cnts[pg,g] := length(MappingComb[pg,g]) od od:
        
        t := '<form name="specmap" action="gateway.pl" method="post">\n<table class="dropdown" id="species_mapping">\n'.
             '<tr><th>extracted species</th><th># protein uploaded</th><th>mapped species</th><th># mappable proteins</th></tr>';
        jsMap := '[';
        for pg to prNS do
            t := t.sprintf('<tr><td>%a</td><td>%d</td><td>'.
               '<select name="p%04d" onChange="changeMapCnt(%d);">\n', 
                 SPS[pg], TotProts[pg], pg, pg);
            ord := sort([seq(g,g=1..NS)], x->-cnts[pg,x]);
            hasDefaultSpec := evalb( cnts[pg,ord[1]]/TotProts[pg] > 0.3 );
            t := t.sprintf('<option value="n.a." %s>no mapping</option>\n', 
	                   If(hasDefaultSpec,'','selected="selected"'));
            jsMap := jsMap . If(pg=1,'',',') . '{"n.a.":0';
            for p to NS while cnts[pg,ord[p]]>0 do 
                t := t.sprintf(' <option value="%s"%s>%s - %s</option>\n',
                       genomes[ord[p]], If(p=1 and hasDefaultSpec,' selected="selected"',''),
		       genomes[ord[p]], GS[genomes[ord[p]],SCINAME]);
            jsMap := jsMap.sprintf(',"%s":%d', genomes[ord[p]], cnts[pg,ord[p]]);
            od:
            t := t.sprintf('</select></td><td>%d</td></tr>\n', If(hasDefaultSpec, cnts[pg,ord[1]],0));
        jsMap := jsMap.'}';
        od:
        t := t.sprintf('</table>\n<input type="hidden" name="p0" value="%s" />\n',PID);
        t := t.'<input type="hidden" name="f" value="MapRels"/>\n'.
             '<input type="submit" value="Next"/></form>\n';
        jsMap := jsMap.'];';
                 
        vars['content'] := t;
        vars['jsMappingArray'] := jsMap;
        return( GenerateTemplate(wdir.'templates/sequenceMapping.html',vars) );
    fi:
    
    # the mapping did not start. start it! :-)
    CallSystem('touch '.lock);
    cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); spListFn:=''%s''; seqFn := ''%s''; '.
                  'resFn := ''%s''; lock:=''%s''; PID := ''%s''; '.
		  'ReadProgram(''%s/ComputeSeqMapping.drw''); done" '.
                  '| nice -n 19 %s &',
                  wdir, fnBase.'.sps', fnBase.'.seqs', seqMapResFn, lock, PID, wdir, darwin64);
    WriteLog('started command: '.cmd);
    prints(cmd);

    CallSystem( cmd );
    vars['content'] := 'Started computing sequence mapping...';
    html := GenerateTemplate(wdir.'templates/uploaded.html',vars);
    return(html);
end:

bsCheckRelMap := proc(PID:string)
    pKey := GetPKeyData(PID);
    fnBase := pKey['fnBase'];
    dbFn := fnBase.'.db';
    lock := fnBase.'.rel.lock';
    
    vars := table(''):
    vars['tit'] := GetPKeyData(PID)['Title'];
    vars['reloadin'] := 10;
    vars['PID'] := PID;

    if FileExists(lock) then
        vars['mappingStatus'] := HandleLockFile(lock);
	return( GenerateTemplate(wdir.'templates/checkRelMapping.html',vars) );
    elif FileExists(dbFn) then
        return(bsTestSelection(PID));
    else error('RelMapping not started for '.PID) fi:
end:

bsMapRels := proc(PID:string)
    global SPS:
    fnBase := GetPKeyData(PID)['fnBase'];
    dbFn := fnBase.'.db';
    seqMapFn := fnBase.'.seqmap';
    lock := fnBase.'.rel.lock';
    reference := GetPKeyData(PID)['ref'];

    vars := table(''):
    vars['tit'] := GetPKeyData(PID)['Title'];

    # in general, this should not be the case!
    if FileExists(dbFn) then
        # provide test selection page:
	WriteLog('Strange program flow! Attack?');
        return( bsTestSelection(PID) );
    fi:

    # check if mapping process is already running
    if FileExists(lock) and IsLockProcessAlive(lock) then
        vars['content'] := '<p>Still computing...</p>';
	WriteLog('DOS-ATTACK?'); sleep(5);
    else 
        # the mapping did not start. start it! :-)
        CallSystem('touch '.lock);
        if reference='OMA' then
            SPS := 0; ReadProgram(fnBase.'.sps'); assert(SPS<>0);
            if nargs<=length(SPS) then error('too few arguments received') fi;
            orgMap := [seq( SearchArray(z, genomes), z=[args[2..length(SPS)+1]] )];
        fi:
    
        # start computation as background process
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resDBfn:=''%s''; seqmapfn:= ''%s''; '.
                      'relsinfn := ''%s''; lock:=''%s''; orgMap := %A; PID := ''%s''; '.
                      'ReadProgram(''%s/ComputeRelMapping.drw''); done;" | nice -n 19 %s &',
                      wdir, dbFn, seqMapFn, fnBase.'.rels', lock, orgMap, PID, wdir, darwin64);
        WriteLog('started command: '.cmd);
        if printlevel>2 then prints(cmd) fi;
    
        CallSystem( cmd );
    fi:
    return('Location: gateway.pl?f=CheckRelMap&p1='.PID.'\n\n');
    return(html);
end:


bsTestSelection := proc(PID:string)
    pKey := GetPKeyData(PID);
    fnBase := pKey['fnBase'];
    dbFn := fnBase.'.db';
    if not FileExists(dbFn) then 
        error('Project "'.GetPKeyData(PID)['Title'].'" was not corretely uploaded');
    fi:

    vars := table(''):
    vars['tit'] := pKey['Title'];
    dataset := pKey['ref'];
    vars['ref'] := dataset;
    vars['isRefSet'] := evalb(dataset<>'OMA');
    vars['notRefSet'] := evalb(dataset='OMA');
    
    t := [seq(If(z['PID']<>PID,[z['Title'],z['PID']],NULL), 
        z=GetPublicProjects(dataset))]:
    if length(t)>0 then
        t := transpose(sort(t)):
        pubPID := t[2]; publicProjects := t[1]; 
    else pubPID := publicProjects := []; 
    fi:
    Npub := length(pubPID):
    pairwiseOverlap := [seq( ProjSpeciesOverlap([PID,z]), z=pubPID)];
    
    for z in ['Euk','Bac','Fun'] do
        if ProjMetProperty(PID, GetTestProperty('TreeTest_'.z)) then
            vars['TT'.z.'Projects'] := ConcatStrings(
              [seq(sprintf('<input type="checkbox" id="pTT%sPrj%d" name="pTT%sPrj%d" %s/>'.
	                   '<label for="pTT%sPrj%d">%s</label><br/>', z,pNr,z,pNr,
			   If(ProjMetProperty(pubPID[pNr],GetTestProperty('TreeTest_'.z)) and 
			      length(pairwiseOverlap[pNr])>5,'checked="checked"','disabled="disabled"'),
		           z,pNr,publicProjects[pNr]), pNr=1..Npub)],'\n');
	vars['style'.z] := 'checked="checked"'; vars['has'.z] := true;
	else vars['style'.z] := 'disabled="disabled"'; vars['has'.z] := false;
        fi:
    od:
   
    # load the TreeCases of the available reconciled tree problems
    refPhyloProbs := [seq(GetTreeCase( z, dataset ), z=GetAllTreeCases(dataset))];
    stub := 'pRefPhyloPrj';

    vars['RefPhyloProjects'] := ConcatStrings(
         [seq(If( length(pairwiseOverlap[pNr])>1,
	          sprintf('<input type="checkbox" id="%s%d" name="%s%d" checked="checked"/>'.
	                  '<label for="%s%d">%s</label><br/>',
                          stub,pNr,stub,pNr,stub,pNr,publicProjects[pNr]), 
	          ''), pNr=1..Npub)],'\n');
    stub := 'pRefPhyloProb';
    vars['RefPhyloProblems'] := ConcatStrings(
         [seq(If( ProjMetProperty(PID, GetTestProperty(z['Name'])), 
	          sprintf('<input type="checkbox" id="%s%s" name="%s%s" checked="checked" />'.
	              '<label for="%s%s"><span title="%s">%s</span></label> <br/>',
                      stub,z['Name'],stub,z['Name'],stub,z['Name'],z['Reference'],z['DisplayName']),
		  ''), 
		  z=refPhyloProbs)],'\n');
    vars['RefPhyloProb1_id'] := 'RefPhyloProb'.refPhyloProbs[1,'Name'];
    vars['hasRefPhylo'] := SearchString('<input',vars['RefPhyloProjects'])>=0 and 
                           SearchString('<input',vars['RefPhyloProblems'])>=0;
    vars['styleRefPhylo'] := If(vars['hasRefPhylo'] or dataset<>'OMA',
        'checked="checked"', 'disabled="disabled"');
    
    # load the semiautomatic TreeCases
    testset := 'SemiAuto';
    autoPhyloProbs := [seq(GetTreeCase( z, dataset,'testset'=testset ), z=GetAllTreeCases(dataset,'testset'=testset))];
    stub := 'pAutoPhyloPrj';

    vars['AutoPhyloProjects'] := ConcatStrings(
         [seq(If( length(pairwiseOverlap[pNr])>1,
	          sprintf('<input type="checkbox" id="%s%d" name="%s%d" checked="checked"/>'.
	                  '<label for="%s%d">%s</label><br/>',
                          stub,pNr,stub,pNr,stub,pNr,publicProjects[pNr]), 
	          ''), pNr=1..Npub)],'\n');
    stub := 'pAutoPhyloProb';
    vars['AutoPhyloProblems'] := ConcatStrings(
         [seq(If( ProjMetProperty(PID, GetTestProperty(z['Name'])), 
	          sprintf('<input type="checkbox" id="%s%s" name="%s%s" checked="checked" />'.
	              '<label for="%s%s"><span title="%s">%s</span></label> <br/>',
                      stub,z['Name'],stub,z['Name'],stub,z['Name'],z['Reference'],z['DisplayName']),
		  ''), 
		  z=autoPhyloProbs)],'\n');
    vars['AutoPhyloProb1_id'] := 'AutoPhyloProb'.autoPhyloProbs[1,'Name'];
    vars['hasAutoPhylo'] := SearchString('<input',vars['AutoPhyloProjects'])>=0 and 
                           SearchString('<input',vars['AutoPhyloProblems'])>=0;
    vars['styleAutoPhylo'] := If(vars['hasAutoPhylo'] or dataset<>'OMA',
        'checked="checked"', 'disabled="disabled"');

   
    ##################################
    # Multi Domain Homology 
    stub := 'pHomPrj';
    vars['HomProjects'] := ConcatStrings(
         [seq(If( length(pairwiseOverlap[pNr])>1,
             sprintf('<input type="checkbox" id="%s%d" name="%s%d" checked="checked"/>'.
                     '<label for="%s%d">%s</label><br/>',
                         stub, pNr, stub, pNr, stub, pNr, publicProjects[pNr]),
             ''), pNr=1..Npub)],'\n');
    stub := 'pHomProb'; name := 'HumMus';
    vars['HomProblems'] := sprintf(
        '<input type="checkbox" id="%s%s" name="%s%s" checked="checked" />'.
        '<label for="%s%s"><span title="%s">%s</span></label> <br/>',
        stub, name, stub, name, stub, name, 'Song <i>et al</i>, '.
        'PLOS Comp Biol, 2008', 'Multidomain homologs between Human and Mouse');
    vars['hasHom'] := SearchString('<input',vars['HomProjects'])>=0;
    vars['styleHom'] := If(vars['hasHom'] or dataset<>'OMA', 
        'checked="checked"', 'disabled="disabled"');


    ##################################
    # Function based
    stub := 'pGOPrj';
    vars['GOprojects'] := ConcatStrings(
         [seq(If( length(pairwiseOverlap[pNr])>1,
                  sprintf('<input type="checkbox" id="%s%d" name="%s%d" checked="checked" />'.
                          '<label for="%s%d">%s</label><br/>',
                          stub,pNr,stub,pNr,stub,pNr,publicProjects[pNr]), 
	          ''), 
		  pNr=1..Npub)],'\n');
    vars['hasGO'] := SearchString('<input',vars['GOprojects'])>=0;
    vars['styleGO'] := If(vars['hasGO'] or dataset<>'OMA', 
        'checked="checked"', 'disabled="disabled"');

    stub := 'pECPrj';
    vars['ECprojects'] := ConcatStrings(
         [seq(If( length(pairwiseOverlap[pNr])>1,
                  sprintf('<input type="checkbox" id="%s%d" name="%s%d" checked="checked" />'.
	                  '<label for="%s%d">%s</label><br/>',
                          stub,pNr,stub,pNr,stub,pNr,publicProjects[pNr]), 
	          ''),
		  pNr=1..Npub)],'\n');
    vars['hasEC'] := SearchString('<input',vars['ECprojects'])>=0;
    vars['styleEC'] := If(vars['hasEC'] or dataset<>'OMA', 'checked="checked"', 'disabled="disabled"');

    vars['PID'] := PID;
    return( GenerateTemplate(wdir.'templates/testSelection.html',vars) );
end:

StartTreeTest := proc(PID:string, king:string, params:list, pnames:list )
    fnBase := GetPKeyData(PID)['fnBase'];
    lock  := sprintf('%s.%s.lock',fnBase,king);
    vars := table('');
    vars['case'] := king;
    vars['resheader'] := 'Species Tree Discordance Test - Dataset '.king;
    vars['resFigReady'] := false;
    vars['ref'] := GetPKeyData(PID)['ref'];
    
    projs := [op( {op(GetPublicProjects(vars['ref']))} minus {GetPKeyData(PID)} )];
    projs := sort( projs, x->x['Title'] );
    sel := [seq(If(length(z)>9 and z[1..9]='pTT'.king[1..3].'Prj', parse(z[10..-1]), NULL), z=pnames)];
    projs := [seq(projs[i,'PID'], i=sel), PID];
    meth := ParseStrategy(pnames,params):
    if meth='PAIRWISE' and length(projs)<=2 then 
        meth := 'INTERSECT'; fi:

    resBase := sprintf('TreeTest.%s.%a', king, hash([projs,meth]));
    resFn := sprintf('%s/%s.drw', resdir, resBase );
    isRunning := true;
    if FileExists(lock) then
        vars['content'] := HandleLockFile(lock);
    elif FileExists(resFn.'.gz') then
        isRunning := false;
        HandleBoxRFFiles(meth, resFn, resBase, vars);
    else 
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resFn :=''%s''; '.
            'problem := ''%s/TreeCat_%s_%s.drw''; projs := %A; lock:=''%s''; meth:=''%s''; '.
            'ReadProgram(''%s/TreeTest.drw''); done;" | nice -n 19 %s &',
            wdir, resFn, datdir, king, vars['ref'], projs, lock, meth, wdir, darwin64);
        prints(cmd);
        CallSystem( cmd );
        WriteLog('started command: '.cmd);
        vars['content'] := '<p>Computation started...</p>';
    fi:
    return( [GenerateTemplate(wdir.'templates/secResult.htmlc', vars), isRunning] );
end:

StartRefPhyloTest := proc(PID:string, params:list, pnames:list ;
    'testset'=((testset='Ref'):{'Ref','Auto'}) )
    fnBase := GetPKeyData(PID)['fnBase'];
    lock  := sprintf('%s.%sPhyl.lock',fnBase,testset);
    vars := table('');
    if testset='Ref' then
        vars['resheader'] := 'Agreement with Reference Phylogeny';
    elif testset='Auto' then
        vars['resheader'] := 'Agreement with Semi-automated Reference Phylogeny';
    fi:

    vars['resFigReady'] := false;
    vars['ref'] := GetPKeyData(PID)['ref'];
    
    projs := [op( {op(GetPublicProjects(vars['ref']))} minus {GetPKeyData(PID)} )];
    projs := sort( projs, x->x['Title'] );
    prefix := sprintf('p%sPhyloPrj', testset); 
    sel := ParseAllPrefixParams( prefix, pnames, params, 'onlyIf'='on'); 
    projs := [seq(projs[i,'PID'], i=sel), PID];
    
    k := SearchArray( sprintf('p%sPhylAggMeas',testset), pnames );
    measure := If(k>0,params[k],'sample variance');
    meth := ParseStrategy(pnames,params):
    if meth='PAIRWISE' and length(projs)<=2 then 
        meth := 'INTERSECT'; fi:

    prefix := sprintf('p%sPhyloProb', testset);
    problems := ParseAllPrefixParams( prefix, pnames, params, 'onlyIf'='on' );
    if DEBUG then print('Do '.testset.'PhyloTest with those projects:',projs) fi;
    
    resBase := sprintf('%sPhyl.%a', testset, hash([projs,measure,problems,meth]) );
    resFn := sprintf('%s/%s.drw', resdir, resBase );
    isRunning := true;
    if DEBUG then lprint('base: ',resBase,'lock exists:',FileExists(lock), 'res exists:',FileExists(resFn.'.gz')); fi:
    if FileExists(lock) then 
        vars['content'] := HandleLockFile(lock);
    elif FileExists(resFn.'.gz') then
        isRunning := false;
        Handle2dROCFiles(meth, resFn, resBase, problems, projs, vars, 'aggregate'=measure);
    else 
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resFn :=%A; '.
           'projs := %A; lock := %A; problems := %A; measure := %A; meth := %A; '.
           'testset := %A: ReadProgram(''%s/RefPhyloTest.drw''); done;" '.
           '| nice -n 19 %s &',
               wdir, resFn, projs, lock, problems, measure, meth, testset, wdir, darwin64);
        prints(cmd);
        CallSystem( cmd );
        WriteLog('started command: '.cmd);
        vars['content'] := '<p>Computation started...</p>';
    fi:
    if DEBUG then print(vars) fi:
    return( [GenerateTemplate(wdir.'templates/secResult.htmlc', vars), isRunning] );
end:

StartEcTest := proc(PID:string, params:list, pnames:list)
    fnBase := GetPKeyData(PID)['fnBase'];
    lock  := sprintf('%s.EC.lock',fnBase);
    vars := table('');
    vars['resheader'] := 'Enzyme Classification (EC) conservation test';
    vars['resFigReady'] := false;
    vars['ref'] := GetPKeyData(PID)['ref'];
    
    projs := [op( {op(GetPublicProjects(vars['ref']))} minus {GetPKeyData(PID)} )];
    projs := sort( projs, x->x['Title'] );
    sel := [seq(If(length(z)>6 and z[1..6]='pECPrj', parse(z[7..-1]), NULL), z=pnames)];
    projs := [seq(projs[i,'PID'], i=sel), PID];

    measure := params[ SearchArray('pECMeasure',pnames) ];
    meth := ParseStrategy(pnames,params):
    if meth='PAIRWISE' and length(projs)<=2 then 
        meth := 'INTERSECT'; fi:
        
    resBase := sprintf('EC.%a', hash([projs,measure,meth]) );
    resFn := sprintf('%s/%s.drw', resdir, resBase );
    isRunning := true;
    if FileExists(lock) then 
        vars['content'] := HandleLockFile(lock);
    elif FileExists(resFn.'.gz') then
        isRunning := false;
        Handle2dSimFiles(meth, resFn, resBase, vars, 'measure'=measure);
    else 
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resFn :=%A; '.
           'projs := %A; lock:=%A; measure:=%A; meth:=%A; '.
           'ReadProgram(''%s/EcTest.drw''); done;" | nice -n 19 %s &',
               wdir, resFn, projs, lock, measure, meth, wdir, darwin64);
        prints(cmd);
        CallSystem( cmd );
        WriteLog('started command: '.cmd);
        vars['content'] := '<p>Computation started...</p>';
    fi:
    if DEBUG then print('ECTestvars',vars) fi:
    return( [GenerateTemplate(wdir.'templates/secResult.htmlc', vars), isRunning] );
end:

StartGoTest := proc(PID:string, params:list, pnames:list)
    fnBase := GetPKeyData(PID)['fnBase'];
    lock  := sprintf('%s.GO.lock',fnBase);
    vars := table('');
    vars['resheader'] := 'Gene Ontology conservation test';
    vars['resFigReady'] := false;
    vars['ref'] := GetPKeyData(PID)['ref'];
    exEv := {EXP,IDA,IPI,IMP,IGI,IEP,ISS,ISO,ISA,ISM,IGC,RCA,TAS,NAS,IEA,IC,NR};
    
    projs := [op( {op(GetPublicProjects(vars['ref']))} minus {GetPKeyData(PID)} )];
    projs := sort( projs, x->x['Title'] );
    sel := [seq(If(length(z)>6 and z[1..6]='pGOPrj', 
                   parse(z[7..-1]), NULL), z=pnames)];
    projs := [seq(projs[i,'PID'], i=sel), PID];

    filter := {seq( If(length(z)>6 and z[1..6]='pGOFil', 
                       parse(z[7..-1]),NULL), z=pnames)};
    filter := intersect(filter, exEv);
    measure := params[ SearchArray('pGOMeasure',pnames) ];
    meth := ParseStrategy(pnames,params):
    if meth='PAIRWISE' and length(projs)<=2 then 
        meth := 'INTERSECT'; fi:
    
    resBase := sprintf('GO.%a', hash([projs,filter,measure,meth]) );
    resFn := sprintf('%s/%s.drw', resdir, resBase );
    isRunning := true;
    if FileExists(lock) then 
        vars['content'] := HandleLockFile(lock);
    elif FileExists(resFn.'.gz') then
        isRunning := false;
        Handle2dSimFiles(meth, resFn, resBase, vars, 'measure'=measure);
    else 
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resFn :=%A; filter := %A;'.
               'projs := %A; lock:=%A; measure:=%A; meth := %A; '.
	       'ReadProgram(''%s/GoTest.drw''); done;" | nice -n 19 %s &',
               wdir, resFn, filter, projs, lock, measure, meth, wdir, darwin64);
        prints(cmd);
        CallSystem( cmd );
        WriteLog('started command: '.cmd);
        vars['content'] := '<p>Computation started...</p>';
    fi:
    if DEBUG then print('GOtestvars:',vars) fi:
    return( [GenerateTemplate(wdir.'templates/secResult.htmlc', vars),isRunning] );
end:

StartHomologyTest := proc(PID:string, params:list, pnames:list)
    fnBase := GetPKeyData(PID)['fnBase'];
    lock  := sprintf('%s.Homology.lock',fnBase);
    vars := table('');
    vars['resheader'] := 'Correct Homology Detection of Multi-Domain Proteins';
    vars['contributor'] := '';
    vars['pubref'] := '';
    vars['resFigReady'] := false;
    vars['ref'] := GetPKeyData(PID)['ref'];
    
    projs := [op( {op(GetPublicProjects(vars['ref']))} minus {GetPKeyData(PID)} )];
    projs := sort( projs, x->x['Title'] );
    sel := [seq(If(length(z)>7 and z[1..7]='pHomPrj', parse(z[8..-1]), NULL), z=pnames)];
    projs := [seq(projs[i,'PID'], i=sel), PID];

    meth := ParseStrategy(pnames,params):
    if meth='PAIRWISE' and length(projs)<=2 then 
        meth := 'INTERSECT'; fi:
    measure := ParseParam('pHomAggMeas', pnames, params, 'default'='sample variance');
    problems := ParseAllPrefixParams( 'pHomProb', pnames, params, 'onlyIf'='on');
        
    resBase := sprintf('Homology.%a', hash([projs,problems,measure,meth]) );
    resFn := sprintf('%s/%s.drw', resdir, resBase );
    isRunning := true;
    if FileExists(lock) then 
        vars['content'] := HandleLockFile(lock);
    elif FileExists(resFn.'.gz') then
        isRunning := false;
        Handle2dROCFiles(meth, resFn, resBase, problems, projs, vars, 
           'aggregate'=measure,'FPRLabel'='coverage', 
           'TPRLabel'='false discovery rate');
    else 
        cmd := sprintf('echo "ReadProgram(''%s/lib/darwinit''); resFn :=%A; '.
           'projs := %A; problems := %A; measure := %A; lock:=%A; meth:=%A; '.
           'ReadProgram(''%s/HomologyTest.drw''); done;" | nice -n 19 %s &',
               wdir, resFn, projs, problems, measure, lock, meth, wdir, darwin64);
        prints(cmd);
        CallSystem( cmd );
        WriteLog('started command: '.cmd);
        vars['content'] := '<p>Computation started...</p>';
    fi:
    if DEBUG then print('HomologyTestvars',vars) fi:
    return( [GenerateTemplate(wdir.'templates/secResult.htmlc', vars), isRunning] );
end:


#################################
# Run Tests                     #
#################################
bsRunTests := proc(params:list, pnames:list)
    if length(params) <> length(pnames) then
       error('unexpected parameters'); fi;
    
    h := string(hash( [params, pnames] ));
    OpenWriting( sessiondir.h );
    printf('# %s\n__SessionParams:=%A:\n__SessionPnames:=%A:\n', date(), params, pnames);
    OpenWriting(previous);
    return('Location: gateway.pl?f=CheckResults&p1='.h.'\n\n'); 
end:

bsCheckResults := proc(sessionkey)
    global __SessionParams, __SessionPnames; 
    __SessionParams := __SessionPnames := 0;
    fn := sessiondir.string(sessionkey);
    lprint(fn);
    traperror(ReadProgram( fn ));
    if __SessionParams=0 or __SessionPnames=0 then
        lprint(__SessionParams,__SessionParams,lasterror);
        error('could not load session information') fi;

    pnames := __SessionPnames; params := __SessionParams;
    PID := params[SearchArray('pPID',pnames)];
    vars := table('');
    vars['tit'] := GetPKeyData(PID)['Title'];
    vars['sessionkey'] := string(sessionkey);
    refresh := false;
    k := SearchArray('pTTEuk1', pnames);
    if k>0 and params[k]='on' then
        # do eukaryotic tree test
	t := StartTreeTest(PID,'Eukaryota',params, pnames);
        vars['TTEuk1'] := t[1]; 
	if t[2]=true then refresh := true fi:
    fi;

    k := SearchArray('pTTFun1', pnames);
    if k>0 and params[k]='on' then
        # do fungi tree test
	t :=  StartTreeTest(PID,'Fungi',params, pnames);
        vars['TTFun1'] := t[1];
	if t[2]=true then refresh := true fi:
    fi;

    k := SearchArray('pTTBac1', pnames);
    if k>0 and params[k]='on' then 
        # do bacteria tree test
        t := StartTreeTest(PID,'Bacteria',params, pnames);
        vars['TTBac1'] := t[1]; 
	if t[2]=true then refresh := true fi:
    fi;

    k := SearchArray('pRefPhylo1', pnames);
    if k>0 and params[k]='on' then
        # do reference phylogeney based test
        t := StartRefPhyloTest(PID, params, pnames);
	vars['RefPhylo'] := t[1]; 
	if t[2]=true then refresh := true fi:
    fi;
    
    k := SearchArray('pAutoPhylo1', pnames);
    if k>0 and params[k]='on' then
        # do reference phylogeney based test
        t := StartRefPhyloTest(PID, params, pnames,'testset'='Auto');
	vars['AutoPhylo'] := t[1]; 
	if t[2]=true then refresh := true fi:
    fi;

    k := SearchArray('pHom1', pnames);
    if k>0 and params[k]='on' then
        t := StartHomologyTest(PID, params, pnames);
        vars['Hom'] := t[1];
        if t[2]=true then refresh := true fi:
    fi:

    k := SearchArray('pGO1',pnames);
    if k>0 and params[k]='on' then
        t := StartGoTest(PID, params, pnames);
	vars['GO'] := t[1]; 
	if t[2]=true then refresh := true fi:
    fi:

    k := SearchArray('pEC1', pnames);
    if k>0 and params[k]='on' then
        t := StartEcTest(PID,params, pnames);
	vars['EC'] := t[1];
	if t[2]=true then refresh := true fi:
    fi:
    
    if refresh then vars['reloadin'] := 20 fi;
    vars['refresh'] := refresh;
    print(vars);
    return( GenerateTemplate(wdir.'templates/testResults.html', vars) );
end:

##########################################
# Not yet implemented functions         #
##########################################
NotImplemented := proc(text:string)

vars := table('');
vars['function'] := text;

return(GenerateTemplate(wdir.'templates/notimpl.html',vars));
end:

# -------------------------------------------------------------------------
printlevel := 2;
if DEBUG then 
    Cookies := table(NULL);
    printlevel := 10;
else
    lprint('Server started, pid =',getpid());
    RunServer() 
fi;
