##
#  Script to run the reference phylogeny tests. 
#
#  in: resFn, problems, projs, lock
Set(printgc=false):
WriteLock(lock, 'initializing computation');
IDIndex := ReadDb(omaDBpath.'IDIndex.db');

prj := [seq(GetPKeyData(z),z=projs)]:
iSet := GetProjISets(prj);
LoadGenomeStartIDs(); # initalizes GSID

# load the project databases
nP := length(prj); dbs := CreateArray(1..nP):
for i to nP do dbs[i] := DB := ReadDb( prj[i,'fnBase'].'.db' ); od:

ReadProgram(datdir.'ReconciledTrees.drw'); #Assigns ReconciledTrees (a table)
nrProb := length(problems);

# false positive and true positive rates.
#  - set to 0 to indicate no data
#  - set to list [fpr, var(fpr)] once data is stored
fpr  := CreateArray(1..nrProb,1..nP,0);
tpr  := CreateArray(1..nrProb,1..nP,0);
DUPL := {':D=Y','D=Y','D','DUPLICATION'}; SPEC := {':D=N','D=N','S','SPECIATION'};
for prNr to nrProb do 
    rels := ReconciledTrees[problems[prNr],'Relations']: 
    prts := intersect(iSet, ReconciledTrees[problems[prNr],'MappedProts']); 
    nProt := length(prts);
    if nProt>5 then 
        t := prNr/(nrProb+1);
        WriteLock(lock,sprintf('%.0f%% done. Estimated remaining time: %.0fsec\n', 100*t, (1-t)*time()));
        dups := table({}); specs := table({});
        for p1 in prts do for p2 in prts do 
            ev := rels[{p1,p2}];
        if member(ev,DUPL) then dups[p1] := append(dups[p1], p2);
        elif member(ev,SPEC) then specs[p1] := append(specs[p1],p2); fi:
        od od:
        
        # we iterate over all the projects
        for pNr to nP do 
            DB := dbs[pNr];
            # iteration over the proteins in iSet and current reconciled tree
            fp := tp := fn := tn := 1; #uniform prior probability
            for oE1 in prts do
                eNr1 := If(prj[pNr,'directMap'], oE1, DbEntryNrFromENr(oE1));
                vps := ParseLongList(SearchTag('VP',Entry(eNr1)));
                vps := {op(vps)} intersect prts;
                    
                tp := tp + length( intersect(vps, specs[oE1]) )/2;
                tn := tn + length( minus(dups[oE1], vps) )/2;
                fp := fp + length( intersect(vps, dups[oE1]) )/2;
                fn := fn + length( minus(specs[oE1], vps) )/2;
            od:
            assert( tp+tn+fp+fn-4 = nProt*(nProt-1)/2 );
            # compute the fpr and tpr and their variances
            p := fp/(fp+tn); 
            fpr[prNr,pNr] := [p, p*(1-p)/(fp+tn)];
            p := tp/(tp+fn); 
            tpr[prNr,pNr] := [p, p*(1-p)/(tp+fn)];
        od:
    else 
        printf('too few (%d) proteins in %a\n',nProt,problems[prNr]);
    fi:
od:


OpenWriting(resFn);
printf('# created on %s\n# Projects: %A\n# Problems: %A\n', date(),
       [seq(z['Title'], z=prj)], problems);
printf('FPR := %A:\nTPR := %A:\n', fpr, tpr);
OpenWriting(previous);

CallSystem('rm -f '.lock);
done;

