TESTPROPERTIES := table(0):

TESTPROPERTIES['TreeTest_Euk'] := TestProperty('TreeTest_Euk',proc (p:PKeyData, prop:TestProperty) local lookup, cNr, g, lenLU, iSet, cat, i, k; if p['directMap'] then return(true) fi; ReadProgram(prop[Args,1]); lookup := []; for cNr to length(catBins) do for g in catBins[cNr] do lookup := append(lookup,[g, cNr]) od od; lookup := transpose(sort(lookup)); lenLU := length(lookup[1]); iSet := GetProjISets([p]); cat := CreateArray(1..length(catBins)); for i to length(iSet) do g := GenomeCodeFromENr(iSet[i]); k := SearchOrderedArray(g,lookup[1]); if k <= 0 or lenLU < k or lookup[1,k] <> g then next fi; cat[lookup[2,k]] := cat[lookup[2,k]]+1; if mod(i,20) = 0 and 0 < product(cat) then return(true) fi od; return(sum(If(z = 0,1,0),z = cat) <= prop['Args',2]) end,['data/TreeCat_Eukaryota.drw', 1],1260360145):
TESTPROPERTIES['TreeTest_Bac'] := TestProperty('TreeTest_Bac',proc (p:PKeyData, prop:TestProperty) local lookup, cNr, g, lenLU, iSet, cat, i, k; if p['directMap'] then return(true) fi; ReadProgram(prop[Args,1]); lookup := []; for cNr to length(catBins) do for g in catBins[cNr] do lookup := append(lookup,[g, cNr]) od od; lookup := transpose(sort(lookup)); lenLU := length(lookup[1]); iSet := GetProjISets([p]); cat := CreateArray(1..length(catBins)); for i to length(iSet) do g := GenomeCodeFromENr(iSet[i]); k := SearchOrderedArray(g,lookup[1]); if k <= 0 or lenLU < k or lookup[1,k] <> g then next fi; cat[lookup[2,k]] := cat[lookup[2,k]]+1; if mod(i,20) = 0 and 0 < product(cat) then return(true) fi od; return(sum(If(z = 0,1,0),z = cat) <= prop['Args',2]) end,['data/TreeCat_Bacteria.drw', 1],1260360145):
TESTPROPERTIES['TreeTest_Fun'] := TestProperty('TreeTest_Fun',proc (p:PKeyData, prop:TestProperty) local lookup, cNr, g, lenLU, iSet, cat, i, k; if p['directMap'] then return(true) fi; ReadProgram(prop[Args,1]); lookup := []; for cNr to length(catBins) do for g in catBins[cNr] do lookup := append(lookup,[g, cNr]) od od; lookup := transpose(sort(lookup)); lenLU := length(lookup[1]); iSet := GetProjISets([p]); cat := CreateArray(1..length(catBins)); for i to length(iSet) do g := GenomeCodeFromENr(iSet[i]); k := SearchOrderedArray(g,lookup[1]); if k <= 0 or lenLU < k or lookup[1,k] <> g then next fi; cat[lookup[2,k]] := cat[lookup[2,k]]+1; if mod(i,20) = 0 and 0 < product(cat) then return(true) fi od; return(sum(If(z = 0,1,0),z = cat) <= prop['Args',2]) end,['data/TreeCat_Fungi.drw', 1],1260360145):
